<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot.Shared</name>
    </assembly>
    <members>
        <member name="T:Conversations.Shared.BroadcastObservable`1">
            <summary>
            Implements <see cref="T:System.IObservable`1" /> in a simple way so that an owner can simply broadcast a current state to all observers.
            </summary>
            <typeparam name="T">The type of value to be made observable. This type <em>should</em> be immutable because all subscribers will get a reference to the same value.</typeparam>
        </member>
        <member name="M:Conversations.Shared.BroadcastObservable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Conversations.Shared.BroadcastObservable`1" /> class.
            </summary>
            <param name="initialValue">The first value for the observable, which will propagate to any observer that subscribes before the value is updated.</param>
        </member>
        <member name="P:Conversations.Shared.BroadcastObservable`1.Value">
            <summary>
            Gets or sets the observable value.
            Changes to this property are automatically propagated to all subscribers.
            </summary>
        </member>
        <member name="M:Conversations.Shared.BroadcastObservable`1.Complete(System.Exception)">
            <summary>
            Broadcasts to observers that no more value updates will come.
            </summary>
            <param name="exception">An explanation of any fault that may have led to early completion of this observable.</param>
        </member>
        <member name="M:Conversations.Shared.BroadcastObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Adds an observer to this observable value.
            </summary>
            <param name="observer">The observer.</param>
            <returns>A value that may be disposed of to cancel the subscription.</returns>
        </member>
        <member name="T:Conversations.Shared.DebuggerContext.CodeContext">
            <summary>
            Represents a code context in the debugged process.
            </summary>
            <param name="CodeSnippet">The actual lines of code of interest.</param>
            <param name="ActiveStatementLine">The index of the active statement within <paramref name="CodeSnippet" />.</param>
        </member>
        <member name="M:Conversations.Shared.DebuggerContext.CodeContext.#ctor(System.String[],System.Int32)">
            <summary>
            Represents a code context in the debugged process.
            </summary>
            <param name="CodeSnippet">The actual lines of code of interest.</param>
            <param name="ActiveStatementLine">The index of the active statement within <paramref name="CodeSnippet" />.</param>
        </member>
        <member name="P:Conversations.Shared.DebuggerContext.CodeContext.CodeSnippet">
            <summary>The actual lines of code of interest.</summary>
        </member>
        <member name="P:Conversations.Shared.DebuggerContext.CodeContext.ActiveStatementLine">
            <summary>The index of the active statement within <paramref name="CodeSnippet" />.</summary>
        </member>
        <member name="T:Conversations.Shared.DebuggerContext.DeadlockedThreadContext">
            <summary>
            Contains relevant information about a deadlocked thread in the debugged process.
            </summary>
        </member>
        <member name="M:Conversations.Shared.DebuggerContext.DeadlockedThreadContext.#ctor(Conversations.Shared.DebuggerContext.ThreadContext,System.Collections.Generic.IList{Conversations.Shared.DebuggerContext.SynchronizationObjectContext},Conversations.Shared.DebuggerContext.CodeContext,System.Collections.Generic.IList{System.ValueTuple{System.String,System.String}})">
            <summary>
            Contains relevant information about a deadlocked thread in the debugged process.
            </summary>
        </member>
        <member name="T:Conversations.Shared.DebuggerContext.StackFrameContextStats">
            <summary>
            Provides token counts for the various reducible components of a <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" />
            </summary>
            <param name="BaseTokens">
            The tokens required to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" /> without any code content
            </param>
            <param name="ActiveStatementTokens">
            The tokens required in addition to <paramref name="BaseTokens" /> to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" />
            with only the active statement from the code context
            </param>
            <param name="CodeSnippetTokens">
            The tokens required in addition to <paramref name="BaseTokens" /> and <paramref name="ActiveStatementTokens" />
            to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" /> with its entire code context
            </param>
        </member>
        <member name="M:Conversations.Shared.DebuggerContext.StackFrameContextStats.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides token counts for the various reducible components of a <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" />
            </summary>
            <param name="BaseTokens">
            The tokens required to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" /> without any code content
            </param>
            <param name="ActiveStatementTokens">
            The tokens required in addition to <paramref name="BaseTokens" /> to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" />
            with only the active statement from the code context
            </param>
            <param name="CodeSnippetTokens">
            The tokens required in addition to <paramref name="BaseTokens" /> and <paramref name="ActiveStatementTokens" />
            to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" /> with its entire code context
            </param>
        </member>
        <member name="P:Conversations.Shared.DebuggerContext.StackFrameContextStats.BaseTokens">
            <summary>
            The tokens required to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" /> without any code content
            </summary>
        </member>
        <member name="P:Conversations.Shared.DebuggerContext.StackFrameContextStats.ActiveStatementTokens">
            <summary>
            The tokens required in addition to <paramref name="BaseTokens" /> to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" />
            with only the active statement from the code context
            </summary>
        </member>
        <member name="P:Conversations.Shared.DebuggerContext.StackFrameContextStats.CodeSnippetTokens">
            <summary>
            The tokens required in addition to <paramref name="BaseTokens" /> and <paramref name="ActiveStatementTokens" />
            to promptify the <see cref="T:Conversations.Shared.DebuggerContext.StackFrameContext" /> with its entire code context
            </summary>
        </member>
        <member name="T:Conversations.Shared.DebuggerContext.SynchronizationObjectContext">
            <summary>
            Represents a synchronization object (associated with blocking/blocked relations between threads/tasks)
            in the debugged process.
            </summary>
        </member>
        <member name="M:Conversations.Shared.DebuggerContext.SynchronizationObjectContext.#ctor(System.String,System.String,System.Nullable{System.UInt32})">
            <summary>
            Represents a synchronization object (associated with blocking/blocked relations between threads/tasks)
            in the debugged process.
            </summary>
        </member>
        <member name="T:Conversations.Shared.DebuggerContext.ThreadContext">
            <summary>
            Represents a thread in the debugged process.
            </summary>
        </member>
        <member name="M:Conversations.Shared.DebuggerContext.ThreadContext.#ctor(System.UInt32,System.String)">
            <summary>
            Represents a thread in the debugged process.
            </summary>
        </member>
        <member name="T:Conversations.Shared.DebuggerContext.ThreadIdComparer">
            <summary>
            Helper class to compare threads by thread id.
            </summary>
        </member>
        <member name="T:Conversations.Shared.CopilotRetryPolicy">
            <summary>
            This class represents a retry policy for a given endpoint.
            It provides a exponential backoff strategy for retrying transient errors.
            </summary>
        </member>
        <member name="M:Conversations.Shared.CopilotRetryPolicy.#ctor(System.String,System.Diagnostics.TraceSource)">
            <summary>
            Create a retry policy for a given endpoint.
            </summary>
            <param name="endPointName">Name of the endpoint.</param>
            <param name="traceSource">TraceSource to use.</param>
        </member>
        <member name="T:Conversations.Shared.GithubTokenAuthenticatingMessageHandler">
            <summary>
            Add the GitHub OAuth token to the request
            </summary>
        </member>
        <member name="T:Conversations.Shared.Observer">
            <summary>
            Utility methods for the <see cref="T:System.IObserver`1" /> interface.
            </summary>
        </member>
        <member name="M:Conversations.Shared.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
            <summary>
            Creates an <see cref="T:System.IObserver`1" /> instance that passes all calls to one or two delegates provided by the caller.
            </summary>
            <typeparam name="T">The type of value to be observed.</typeparam>
            <param name="listener">A callback that receives each observed value.</param>
            <param name="completed">A callback that is invoked when the observable object reports that it will no longer send out notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Conversations.Shared.Observer.Create``2(System.Action{``0,``1},``1,System.Action{System.Exception})">
            <summary>
            Creates an <see cref="T:System.IObserver`1" /> instance that passes all calls to one or two delegates and an additional data provided by the caller.
            </summary>
            <typeparam name="T1">The type of value to be observed.</typeparam>
            <typeparam name="T2">The type of the additional data.</typeparam>
            <param name="listener">A callback that receives each observed value and the <paramref name="additionalData" />.</param>
            <param name="additionalData">The data pass to <paramref name="listener" /> callback.</param>
            <param name="completed">A callback that is invoked when the observable object reports that it will no longer send out notifications.</param>
            <returns></returns>
        </member>
        <member name="T:Conversations.Shared.Options.IMarshaledCopilotOptions">
            <summary>
            This interface exposes options to the copilot service.
            </summary>
        </member>
        <member name="T:Conversations.Shared.Telemetry.MeterInstrumentBag`2">
            <summary>
            Collection of metrics associated with a meter that will be posted using a common base event when disposed.
            Suggested for use with an enum key, and switch expression for an instrument factory.
            </summary>
        </member>
        <member name="P:Conversations.Shared.Telemetry.MeterInstrumentBag`2.Meter">
            <summary>
            Meter that will be used to create instruments.
            </summary>
        </member>
        <member name="P:Conversations.Shared.Telemetry.MeterInstrumentBag`2.InstrumentFactory">
            <summary>
            Factory for creating instruments from <see cref="P:Conversations.Shared.Telemetry.MeterInstrumentBag`2.Meter" /> based on a key.
            </summary>
        </member>
        <member name="P:Conversations.Shared.Telemetry.MeterInstrumentBag`2.BaseEventFactory">
            <summary>
            Factory for creating base events for use when posting metric events.
            </summary>
        </member>
        <member name="P:Conversations.Shared.Telemetry.MeterInstrumentBag`2.TelemetrySession">
            <summary>
            Telemetry session to use for posting events.
            </summary>
        </member>
        <member name="P:Conversations.Shared.Telemetry.MeterInstrumentBag`2.SeenPartitions">
            <summary>
            Partitions which have had instruments created.
            </summary>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.GetInstrumentSum``1(`1,`0)">
            <summary>
            Attempt to get the sum of an instrument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="partition"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.PostMetricsInPartition(`1)">
            <summary>
            Post all accumulated instruments belonging to a partition.
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.PostAllMetrics">
            <summary>
            Post all accumulated instruments. This is also called by <see cref="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.Dispose" />.
            </summary>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.Dispose">
            <summary>
            End the lifetime of this meter instrument bag, disposing and sending accumulated instruments as events.
            </summary>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.PostMetricEvents(System.Func{`1,`0,Microsoft.VisualStudio.Telemetry.Metrics.IInstrument,System.Boolean})">
            <summary>
            Send events for collected instruments.
            Instruments that have had sent events will be removed.
            </summary>
            <param name="condition">Optional condition, if specified must be true for the event to be created and sent.</param>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.AssertUnhandledInstrument(System.Object)">
            <summary>
            Helper for asserting on an unhandled instrument type and returning null. Needed because switch expressions don't allow inline blocks.
            </summary>
        </member>
        <member name="M:Conversations.Shared.Telemetry.MeterInstrumentBag`2.GetGenericTypeName(System.Type)">
            <summary>
            Helper to get a subset of more specific generic type names that include type parameters. Mostly for use with IHistogram/ICounter if we need to print an exception that refers to those.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Debugging.DeadlockContext">
            <summary>
            Contains information about a deadlock in the debugged process.
            </summary>
            <param name="StartingThreadId">The "current" or starting thread id in the deadlock chain.</param>
            <param name="DeadlockedThreads">Map of thread ids to the <see cref="T:Conversations.Shared.DebuggerContext.DeadlockedThreadContext" /> in the deadlock chain.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Debugging.DeadlockContext.#ctor(System.Nullable{System.UInt32},System.Collections.Generic.Dictionary{System.UInt32,Conversations.Shared.DebuggerContext.DeadlockedThreadContext})">
            <summary>
            Contains information about a deadlock in the debugged process.
            </summary>
            <param name="StartingThreadId">The "current" or starting thread id in the deadlock chain.</param>
            <param name="DeadlockedThreads">Map of thread ids to the <see cref="T:Conversations.Shared.DebuggerContext.DeadlockedThreadContext" /> in the deadlock chain.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Debugging.DeadlockContext.StartingThreadId">
            <summary>The "current" or starting thread id in the deadlock chain.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Debugging.DeadlockContext.DeadlockedThreads">
            <summary>Map of thread ids to the <see cref="T:Conversations.Shared.DebuggerContext.DeadlockedThreadContext" /> in the deadlock chain.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Internal.Telemetry.BucketizedMeasures">
            <summary>
            Bucketized recorder for common performance events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.BucketizedMeasures.RecordCancel">
            <summary>
            Record a failed instance of the event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.BucketizedMeasures.RecordFailed">
            <summary>
            Record a failed instance of the event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.BucketizedMeasures.RecordTime(System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Records a duration into averages and buckets.
            </summary>
            <param name="timeSpan">Duration to record.</param>
            <param name="uiDelay">An isolated duration to isolate event loop delays.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.BucketizedMeasures.AttachToEvent(Microsoft.VisualStudio.Telemetry.TelemetryEvent,System.String)">
            <summary>
            Attach the bucketized data to the given <see cref="T:Microsoft.VisualStudio.Telemetry.TelemetryEvent" /> <paramref name="ev" /> with optional prefix <paramref name="prefix" />
            </summary>
            <param name="ev">Telemetry event to attach to.</param>
            <param name="prefix"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.ConversationsTelemetry.CombineBagsWithContext(Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag[])">
            <summary>
            Create a new property bag that has all of the properties from <see cref="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.ConversationsTelemetry.ContextBag" /> and other bags.
            If other bags define a property that exists in ContextBag, the value from the other bag will be used.
            Other bags are applied left-to-right, so the last bag in the list will have the highest priority.
            Input bags are not modified.
            </summary>
            <param name="otherBags">Bags to copy properties from on top of ContextBag</param>
            <returns>A new property bag with all the properties of the context and otherBags applied to it</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Internal.Telemetry.IdentifierTelemetryExtensions">
            <summary>
            Extensions for converting identifier record structs to appropriately named telemetry properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.MeterNamePrefix">
            <summary>
            Prefix for meters. A meter name is rejected (causing an exception to be thrown) if it is longer than 63 characters, so use a shorter prefix.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames">
            <summary>
            All telemetry property names should be defined here, with the exception of AsProperty extension methods in <see cref="T:Microsoft.VisualStudio.Conversations.Internal.Telemetry.IdentifierTelemetryExtensions" />
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames.ExceptionDetails">
            <summary>
            Some exceptions (those which contain other exceptions, or are from a remote process)
            may attach an object that contains additional details.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames.ServiceName">
            <summary>
            Package initialization service name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames.ServiceMoniker">
            <summary>
            TelemetryComplexProperty containing the moniker of a brokered service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames.RequestedType">
            <summary>
            A type that was requested at runtime, including the assembly's name and version.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames.Indexing.OperationId">
            <summary>
            Single operation id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryConstants.PropertyNames.Indexing.OperationIds">
            <summary>
            Array of of operation ids
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExceptionExtensions.AddExtraDetails(System.Collections.Generic.IDictionary{System.String,System.Object},System.Exception)">
            <summary>
            Attach an exception's extra capturable details, if any, to a property dictionary.
            Takes no action if the exception doesn't contain capturable details.
            </summary>
            <param name="self">The property dictionary to attach the extra details to.</param>
            <param name="exception">Exception to attempt capturing details from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExceptionExtensions.ToDetailsPropertyBag(System.Exception)">
            <summary>
            Construct property bag and attach an exception's extra capturable details, if any
            Returns an empty property bag if the exception doesn't contain capturable details.
            </summary>
            <param name="exception">Exception that may contain extra details to capture.</param>
            <returns>Property dictionary that may contain extra details about the exception.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExceptionExtensions.CaptureDetails(System.Exception)">
            <summary>
            Captures extra details from an exception.
            This includes remote exceptions, aggregate exceptions, and exceptions that contain other exceptions.
            This will not throw, if it counters an exception then that exception will be attached as an extra exception detail.
            </summary>
            <param name="exception">Exception to capture details from.</param>
            <returns>Any details that were captured from the exception.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.TimeSection``1(Microsoft.VisualStudio.Telemetry.TelemetryScope{``0},System.String)">
            <summary>
            Times a region between the call to this and the disposal of the return and adds a the <paramref name="name" /> property to the scope as a metric.
            </summary>
            <param name="self">The telemetry scope.</param>
            <param name="name">The full property name of the metric.</param>
            <returns>An <see cref="T:System.IDisposable" /> that, when disposed, stops the timer and adds the measure to the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.EnsureEnd``1(Microsoft.VisualStudio.Telemetry.TelemetryScope{``0})">
            <summary>
            Ensures the telemetry scope is ended and sent if not already.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.TryEnd``1(Microsoft.VisualStudio.Telemetry.TelemetryScope{``0},Microsoft.VisualStudio.Telemetry.TelemetryResult)">
            <summary>
            Ends the scope if it has not already ended.
            </summary>
            <remarks>
            Avoid using this in for every case. <see cref="T:Microsoft.VisualStudio.Telemetry.TelemetryScope`1" /> will throw if you attempt to end multiple times
            which is a good bug indicator. Sometimes it's neccessary to end the scope when its state is unknown, for that use this.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.StartOperation(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag,System.Nullable{Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.StartOperation(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.StartOperation(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag,System.Nullable{Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation},System.Boolean)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.StartOperation(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String)" />
            <param name="self"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <param name="sharedBag"></param>
            <param name="correlation"></param>
            <param name="singleEvent">Whether or not to make this a single event instead of a start/stop pair.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.StartUserTask(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag,System.Boolean)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.StartUserTask(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.StartUserTask(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag,System.Nullable{Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation},System.Boolean)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.StartUserTask(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,Microsoft.VisualStudio.Telemetry.TelemetrySeverity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.PostEvent(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySession.PostEvent(System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.PostEvent(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation,Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySession.PostEvent(System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.PostEvent(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySession.PostEvent(System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Exception,Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation,System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Exception,Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag,System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Internal.Telemetry.TelemetryExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.Exception,Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation,Microsoft.VisualStudio.Telemetry.TelemetryPropertyBag,System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception)" />
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>ebWn1LOjDs+JZHlGIsObeNuWKRSJr5Yennd7QHrtY+Q=</DigestValue></Reference></SignedInfo><SignatureValue>sCdP5sW+LCag4DUTrI4i5XDP5tSGnlp1RJpRB3yYdy9zb+ugaavPlRcNHs/PWR4tyqc2ziAlWsx2io5CPNHzghMJUqcPJjwEkLKY0vvr1wBCEb5zjqP/61S4IpT75Z8fJW3aKcBZx9/52bh7OZteNIfXo4+Zq6rWVpGpw45xhGYjg0vYoNRMKb8AmUEpEm9XkKY5XVC6ES+xpDn283PJSkGRcN+6UmuODnjGmwJuVLh4VA6+8LJY7Snlk4Lu86QMdri/8zLO9GeT3JSqj69Ds4Go8C3jO1Lx5pRd4zvEzky1eRvSp1s9kklihE06Oo8h/YBeBrOEcTWhvWt9R7uxxg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
