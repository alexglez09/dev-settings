<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation">
            <summary>
            An object that represents a code vulnerability annotation.
            </summary>
            <param name="Type">The type of vulnerability.</param>
            <param name="FallbackDisplayType">The name of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
            <param name="FallbackDisplayDescription">The description of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.#ctor(Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType,System.String,System.String)">
            <summary>
            An object that represents a code vulnerability annotation.
            </summary>
            <param name="Type">The type of vulnerability.</param>
            <param name="FallbackDisplayType">The name of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
            <param name="FallbackDisplayDescription">The description of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.Type">
            <summary>The type of vulnerability.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.FallbackDisplayType">
            <summary>The name of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityAnnotation.FallbackDisplayDescription">
            <summary>The description of the type to display, as provided by the server. Used as a fallback if we don't have client-side strings for the type.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType">
            <summary>
            An enum representing the different types of code vulnerabilities that can be detected by Copilot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.Unknown">
            <summary>
            An unknown vulnerability type. Used as the default when the server returns a type that is not recognized by the client.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.PathInjection">
            <summary>
            Unvalidated input in path value creation risks unintended file/directory access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.SqlInjection">
            <summary>
            Unchecked input in database commands can alter intended queries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.CodeInjection">
            <summary>
            Treating external input as code without proper validation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.CommandLineInjection">
            <summary>
            Allowing user input in system calls without proper escaping can allow arbitrary command execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.StackTraceExposure">
            <summary>
            Error messages or stack traces can reveal sensitive details.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.IncompleteUrlSubstringSanitization">
            <summary>
            Unvalidated input in URLs risks syntax or behavior modification.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.FlaskDebug">
            <summary>
            Debug mode in Flask production allows arbitrary code execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClearTextLogging">
            <summary>
            Logging sensitive info like passwords by exposing it in clear text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.IncompleteHostnameRegularExpression">
            <summary>
            Regular expression may match unexpected hostnames.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ServerSideUnvalidatedUrlRedirection">
            <summary>
            Unvalidated URL redirection from a remote source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClientSideUnvalidatedUrlRedirection">
            <summary>
            Allowing unvalidated redirection based on user-specified URLs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.UnvalidatedUrlRedirection">
            <summary>
            Unvalidated URL redirection from a remote source.
            TODO: differentiate from ServerSideUnvalidatedUrlRedirection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.WeakCryptographicAlgorithm">
            <summary>
            Using weak encryption or hashing algorithms poses security risks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.WeakCryptographicKey">
            <summary>
            Using weak encryption or hashing algorithms poses security risks.
            TODO: Differentiate from WeakCryptographicAlgorithm.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ServerSideRequestForgery">
            <summary>
            Unvalidated input in HTTP requests may lead to SSRF (Server-Side Request Forgery) attacks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.BindSocketToAllInterfaces">
            <summary>
            Binding to all network interfaces may expose traffic interception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ReflectedCrossSiteScripting">
            <summary>
            Adding unvalidated user input to HTTP responses invites XSS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClearTextStorageFile">
            <summary>
            Storing sensitive data like passwords in clear text is insecure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ClearTextStorageSensitiveData">
            <summary>
            Storing sensitive data like passwords in clear text is insecure.
            TODO: Differentiate from ClearTextStorageFile.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.TarSlip">
            <summary>
            Extracting tar archives without validation may lead to files being unexpectedly overwritten.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.HardcodedCredentials">
            <summary>
            Embedding credentials in source code risks unauthorized access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.InsecureRandomness">
            <summary>
            Weak random number generation can compromise security.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.InsufficientPasswordHash">
            <summary>
            Weak hashing algorithms for passwords poses security risks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.OverlyPermissiveFile">
            <summary>
            Permissions for files should be kept as strict as possible to prevent unintended access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.RegularExpressionInjection">
            <summary>
            Unvalidated user input used in regular expressions can lead to arbitrary code execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.SizeOfPointer">
            <summary>
            Incorrect usage of the sizeof operator on a pointer can lead to memory corruption or buffer overflow vulnerabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotCodeVulnerabilityType.ConditionallyUninitializedVariable">
            <summary>
            Using a variable that may not have been initialized can lead to unpredictable behavior or crashes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentMention">
            <summary>
            Represents an agent mention in some source text, ex: @agent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotAgentMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentMention" /> class.
            </summary>
            <param name="span">The span of the original mention location.</param>
            <param name="inputs">The inputs that make up the mention.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentMention.Name">
            <summary>
            Gets the name of the agent mentioned.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCommandMention">
            <summary>
            Represents a command mention in some source text, ex: /command
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCommandMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCommandMention" /> class.
            </summary>
            <param name="span">The location of the mention in the original prompt text.</param>
            <param name="inputs">The input parts of the mention.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCommandMention.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.IsRefinement">
            <summary>
            Gets a value indicating whether this code part is considered code to be applied.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentCodePart.Annotations">
            <summary>
            Gets the annotations associated with this code part. Code vulnerabilities are one type of annotation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.Mentions">
            <summary>
            Gets parsed mentions present in <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContentTextPart.Content" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.Equals(Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentMarkdownPart.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContentPartId">
            <summary>
            A message-local identifier for individual content parts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContentPartId.#ctor(System.Int32)">
            <summary>
            A message-local identifier for individual content parts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContentVisibility.Model">
            <summary>
            This content is visible to models and will be included in any submitted prompts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotContentVisibility.User">
            <summary>
            This content is visible to the user and can be included in any UI representation of it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextMention">
            <summary>
            Represents a context mention in some source text, ex: #file:`File.cs`
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextMention" /> class.
            </summary>
            <param name="span"></param>
            <param name="inputs"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMention">
            <summary>
            Base class for mentions in request and response content.
            </summary>
            <remarks>
            <para>
            This is the base class for the various types of mentionables:
            1. Agents
            2. Context
            3. Commands
            4. Variables
            </para>
            <para>
            Mentionables share a few characteristics:
            1. They all have a leading syntax character.
            2. They accept inputs.
            </para>
            <para>
            If the parsed mention type has a name, it will be in the first <see cref="P:Microsoft.VisualStudio.Copilot.CopilotMention.Inputs">input</see>.
            Mentions have two phases: Parsed and Queried. Parsing does not determine the presence of the mentioned item,
            only its syntax. Querying is implemented internally and takes a variety of paths to display or determine
            presence before invocation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMention" /> class.
            </summary>
            <param name="span"></param>
            <param name="inputs"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Span">
            <summary>
            Gets the span for the full mention content in the original text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Inputs">
            <summary>
            Gets the inputs that make up the mention.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Service">
            <summary>
            Gets the service associated with this mention.
            </summary>
            <remarks>
            If the prompt has only been parsed and not resolved, this will be <see langword="null" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMention.Symbol">
            <summary>
            Gets the leading symbol for this mention.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.Equals(Microsoft.VisualStudio.Copilot.CopilotMention)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.ContextSymbol">
            <summary>
            The leading symbol for context mentions: #
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.ScopeSymbol">
            <summary>
            The leading symbol for scope mentions: #
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.AgentSymbol">
            <summary>
            The leading symbol for agent mentions: @
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.CommandSymbol">
            <summary>
            The leading symbol for command mentions: /
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.VariableSymbol">
            <summary>
            The leading symbol for external variables: !
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.InputSeparatorSymbol">
            <summary>
            The symbol to separate inputs: :
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.InputQuoteSymbol">
            <summary>
            The quotation symbol for inputs: '
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.InputEscapeSymbol">
            <summary>
            The input character escape symbol: \
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMention.punctuation">
            <summary>
            These symbols are treated as punctuation so they will be escaped and end the parsing of a reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.ToString(Microsoft.VisualStudio.Copilot.CopilotMentionType,System.String[])">
            <summary>
            Creates the raw string syntax for a mention.
            </summary>
            <param name="type">The type of mention.</param>
            <param name="inputs">The input parts to the mention.</param>
            <returns>The raw string format of the mention.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.EscapeInput(System.String)">
            <summary>
            Takes an individual mention input and escapes it.
            </summary>
            <param name="input">The original input.</param>
            <returns>An escaped version of <paramref name="input" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMention.UnescapeInput(System.String)">
            <summary>
            Takes an escaped individual mention input and returns the unescaped version.
            </summary>
            <param name="input">The escaped input to unescape.</param>
            <returns>An unescaped version of <paramref name="input" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMentionType">
            <summary>
            The type of context to query for.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Unknown">
            <summary>
            The mention type is not yet known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Context">
            <summary>
            The mention refers to a piece of context or a scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Command">
            <summary>
            The mention refers to a top level or agent command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Agent">
            <summary>
            The mention refers to a specific agent.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotMentionType.Variable">
            <summary>
            The mention refers to a variable that a responder will handle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSpan.GetContent(System.String)">
            <summary>
            Gets the span content from the original source text.
            </summary>
            <param name="source">The source text to extract the span content from.</param>
            <returns>The span content from the original source text.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotVariableMention">
            <summary>
            Represents a variable mention in some source text, ex: !variable
            </summary>
            <remarks>
            Variables are agent-surfaced mentionables with no defined purpose. The agent can handle them
            in any way it likes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotVariableMention.#ctor(Microsoft.VisualStudio.Copilot.CopilotSpan,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotVariableMention" /> class.
            </summary>
            <param name="span">The span of the original mention location.</param>
            <param name="content">The content of the mention.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotVariableMention.Variable">
            <summary>
            Gets the contents of the variable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContext">
            <summary>
            Represents an individual piece of context to include with a request or pass between functions.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Copilot.CopilotContextDescriptor,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> class.
            </summary>
            <param name="providerMoniker">The moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> service.</param>
            <param name="memberDescriptor">Context descriptor to retrieve member name and copilot type name.</param>
            <param name="requestId">The associated request for this context.</param>
            <param name="value">The actual serializable object representing the context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> class.
            </summary>
            <param name="providerMoniker">The moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> service.</param>
            <param name="member">The specific member on the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> that this originates from.</param>
            <param name="requestId">The associated request for this context.</param>
            <param name="copilotTypeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.DefaultCopilotTypes" />.</param>
            <param name="value">The actual serializable object representing the context.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.ProviderMoniker">
            <summary>
            Gets the name of the provider that generated this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Member">
            <summary>
            Gets the name of the provider member this context is from.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.CanReduce">
            <summary>
            Gets a value indicating whether the context is potentially reducible.
            </summary>
            <remarks>
            This can be speculative; if it is too expensive to determine this at context construction
            but an attempt can be made, set to <see langword="true" />.
            </remarks>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextReducer.ReduceAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.VisualStudio.Copilot.CopilotReductionOptions,Microsoft.VisualStudio.Copilot.ICopilotTokenCounter,System.Threading.CancellationToken)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.RequestId">
            <summary>
            Gets the request id for this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContext.Reference">
            <summary>
            Gets an identifying reference present in a request that relates to this piece of context.
            </summary>
            <remarks>
            The value of a piece of context can vary dependent on its inputs.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContext.Equals(Microsoft.VisualStudio.Copilot.CopilotContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor">
            <summary>
            Describes an individual member of context.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> class.
            </summary>
            <param name="name">The name of the context member.</param>
            <param name="description">A simple description of the member.</param>
            <param name="type">The Copilot type name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotInputDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> class.
            </summary>
            <param name="name">The name of the context member.</param>
            <param name="description">A simple description of the member.</param>
            <param name="type">The Copilot type name.</param>
            <param name="inputs">Potential inputs to constrain the values from this member.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name">
            <summary>
            Gets the name of this piece of context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Description">
            <summary>
            Gets the description of what this piece of context provides.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Type">
            <summary>
            Gets the data type that this context provides.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Inputs">
            <summary>
            Gets the possible inputs that can be passed to this particular context member to augment the resulting value further.
            </summary>
            <example>
            For a document context, range might be an input to pre-constrain a document to only a selected region.
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext">
            <summary>
            Defines the context for a diagnostic.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext" /> class.
            </summary>
            <param name="filePath">The diagnostic file path.</param>
            <param name="errorCode">The error code of the diagnostic.</param>
            <param name="description">The description of the diagnostic.</param>
            <param name="line">The line where the diagnostic occurs.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.FilePath">
            <summary>
            Gets the file path for the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.ErrorCode">
            <summary>
            Gets the error code of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.Description">
            <summary>
            Gets the description of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.Line">
            <summary>
            Gets the line number of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDiagnosticContext.CodeSnippet">
            <summary>
            Gets the code snippet associated with the diagnostic.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMentionQuery">
            <summary>
            Represents a query for potential matching mentionables.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.#ctor(Microsoft.VisualStudio.Copilot.CopilotMentionType,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMentionQuery" /> class.
            </summary>
            <param name="type">The type of query.</param>
            <param name="inputs">The inputs into the query.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.Type">
            <summary>
            Gets the type of mentions being queried for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.Inputs">
            <summary>
            Gets the ordered inputs from a query split from the separators.
            </summary>
            <remarks>
            Note that the first argument can either be the member being referenced (#file:) or
            the name of the search query (#File.cs).
            </remarks>
            <example>
            For the user input #file:'File.cs':15, the inputs will be:
            [0] = file
            [1] = File.cs
            [2] = 15
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMentionQuery.SessionId">
            <summary>
            Gets the copilot session identifier if the completion belongs to a specific session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention">
            <summary>
            Represents a piece of context that can requested later.
            </summary>
            <remarks>
            <para>
            In order to get the actual <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> object this queried item is to represent,
            the <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.Member" /> and <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Inputs" /> are passed to
            <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)" />.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention" /> class.
            </summary>
            <param name="providerMoniker">The context provider moniker providing this context.</param>
            <param name="member">The member providing this context.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedContextMention.Member">
            <summary>
            Gets the member used to generate this context.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(System.Threading.CancellationToken)" />
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedMention">
            <summary>
            Represents a mention that can be displayed or queried later.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedMention" /> class.
            </summary>
            <param name="providerMoniker">The provider moniker providing this mention.</param>
            <param name="fullName">The full expanded parseable string without trigger characters.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.DisplayName">
            <summary>
            Gets the name to display for this query item.
            </summary>
            <example>
            1. File.cs:15-20.
            2. Exception
            </example>
            <remarks>
            The display name for a mentioned item should either represent the name/member of the mentionable being
            referenced (ex. exception) or the identifier for a particular set of inputs to a member (ex. File.cs).
            As such, the display name should not be localized as it is either the same name as a user recognizes,
            or it will match what is inserted into the prompt.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.FullName">
            <summary>
            Gets the full string to be inserted into the prompt, minus trigger characters.
            </summary>
            <remarks>
            The string here must be fully parseable to the exact context.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Description">
            <summary>
            Gets a small additional bit of description to display to the user.
            </summary>
            <example>
            Current document.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Icon">
            <summary>
            Gets an icon to display next to the query items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.IsNavigable">
            <summary>
            Gets a value indicating whether the referenced mention can be navigated to/opened.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Priority">
            <summary>
            Gets a priority for this item. Defaults to <see cref="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.None" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.ProviderMoniker">
            <summary>
            Gets the name of the provider that generated this mention.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.Inputs">
            <summary>
            Gets the inputs used to generate this mention.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Inputs" />
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.None">
            <summary>
            No priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.Low">
            <summary>
            Some prioritization, for items that currently visible.
            </summary>
            <example>
            Files that are open, but not focused.
            </example>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotQueriedMentionPriority.High">
            <summary>
            High prioritization, for items that are an area of focus for the user.
            </summary>
            <example>
            The file of focus or the current exception.
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention">
            <summary>
            Represents a query into a scope.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotScope" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotQueriedScopeMention" /> class.
            </summary>
            <param name="providerMoniker"></param>
            <param name="fullName"></param>
            <param name="displayName"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotReductionOptions">
            <summary>
            Options for guiding content or context reduction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotReductionOptions.Budget">
            <summary>
            Gets the number of tokens available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotScopeInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotScopeInfo" /> class.
            </summary>
            <param name="name">The name of the scope.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotScopeInfo.Name">
            <summary>
            Gets the name of the scope to serve as the prompt item (ex. #workspace).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotScopeInfo.Inputs">
            <summary>
            Gets any inputs this scope accepts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.DocumentContext">
            <summary>
            A document for context.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DocumentContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.DocumentContext" /> class.
            </summary>
            <param name="content">The content of the document.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Content">
            <summary>
            Gets the contents of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.OriginalContent">
            <summary>
            Gets the original content of the document before any changes or reduction. Null if the context has not been modified/reduced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Selections">
            <summary>
            Gets any selected regions within the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.FilePath">
            <summary>
            Gets the file path to the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentContext.Language">
            <summary>
            Gets the language of the document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.DocumentSelection">
            <summary>
            A document region.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DocumentSelection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.DocumentSelection" /> class.
            </summary>
            <param name="start">The beginning position of the region.</param>
            <param name="end">The end position of the region.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentSelection.Caret">
            <summary>
            Gets a caret position if focused.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentSelection.Start">
            <summary>
            Gets the starting position of the region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DocumentSelection.End">
            <summary>
            Gets the ending position of the region.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider">
            <summary>
            A grouping of individual pieces of context, providing snapshotting.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the complete set of members that context can be retrieved from.
            </summary>
            <remarks>
            This list should be a static definition, all members regardless of current state are declared here.
            </remarks>
            <example>
            If your context provider is for the current exception, you might have members like:
            <list type="bullet">
            <term>CurrentException.Type</term>
            <term>CurrentException.Message</term>
            <term>CurrentException.StackTrace</term>
            </list>
            Alternatively, you may choose to bundle them into a single 'CurrentException' member
            that provides a summary of the current exception with a string.
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.StoreAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Store and associate the current context with the <paramref name="requestId" />.
            </summary>
            <remarks>
            Store may be called more than once with the same <paramref name="requestId" />, any duplicate calls
            should no-op.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.ReleaseAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Free any context associated with <paramref name="requestId" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetMembersAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the currently available members that context can be retrieved from.
            </summary>
            <returns>A list of the members available from the state associated with <paramref name="requestId" />.</returns>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)">
            <summary>
            Gets the context from the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor" /> associated with <paramref name="member" /> given the <paramref name="inputs" />.
            </summary>
            <param name="requestId">The request id to indicate the specific version of context to retrieve.</param>
            <param name="member">The name of the member from <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Name" />.</param>
            <param name="inputs">The inputs to the member from <see cref="P:Microsoft.VisualStudio.Copilot.CopilotContextDescriptor.Inputs" />.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> or <see langword="null" /> if the context could not be obtained.</returns>
            <remarks>
            <para>Do not free context once it has been requested here, only do so from <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextProvider.ReleaseAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)" />.</para>
            <para>
            In some cases it be not worth the cost of preserving context should it change in-between a request start and stop. In these cases it is valid
            to return a <see langword="null" /> context which will abort any dependent execution.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable.GetContextReferencesAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Gets the information needed to display these contexts to the user.
            </summary>
            <param name="contexts">A batch of contexts to be converted to display info.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotContextReducer">
            <summary>
            A reducer for copilot contexts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotContextReducer.ReduceAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.VisualStudio.Copilot.CopilotReductionOptions,Microsoft.VisualStudio.Copilot.ICopilotTokenCounter,System.Threading.CancellationToken)">
            <summary>
            Attempt to reduce the contents of the context.
            </summary>
            <param name="context">The context object to reduce.</param>
            <param name="reduction">Options for how to perform the reduction.</param>
            <param name="counter">A token counter.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> containing a smaller <see cref="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value" />.</returns>
            <remarks>
            <para>
            In order to properly represent the actual context that was used to the user, a new context object must be generated instead of simply returning a new prompt.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotDebuggerContextProvider">
            <summary>
            Represents a debugger context provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDebuggerContextProvider.GetCurrentExceptionAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the current exception as context if there is one.
            </summary>
            <param name="correlationId">The correlation id for the request to use the context with.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The current exception as context if there is one or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDebuggerContextProvider.GetCurrentCallStackAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the current call stack as context if paused in the debugger.
            </summary>
            <param name="correlationId">The correlation id for the request to use the context with.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The current call stack as context if currently paused in the debugger or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDebuggerContextProvider.GetCurrentFrameLocalsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the current frame locals as context if paused in the debugger.
            </summary>
            <param name="correlationId">The correlation id for the request to use the context with.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The current exception as context if there is one or <see langword="null" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider">
            <summary>
            Represents a diagnostic context provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider.GetActiveDocumentContextsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the diagnostic context for the active document.
            </summary>
            <param name="correlationId">The correlation ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The diagnostic context for the active document.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider.GetContextsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the diagnostic context for a specific file.
            </summary>
            <param name="correlationId">The correlation ID.</param>
            <param name="filePath">The path of the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The diagnostic context for the specified file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDiagnosticContextProvider.GetContextsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the diagnostic context for a specific file within a range of lines.
            </summary>
            <param name="correlationId">The correlation ID.</param>
            <param name="filePath">The path of the file.</param>
            <param name="startLine">The starting line number.</param>
            <param name="endLine">The ending line number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The diagnostic context for the specified file within the range of lines.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider">
            <summary>
            Represents a document context provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a document context given a <paramref name="filePath" />.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="filePath">File path of document context to acquire</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing a document with given <paramref name="filePath" /> if there is one, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider.GetActiveDocumentAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the active document as context.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing the active document if there is one, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotDocumentContextProvider.GetExplicitSelectionAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets an explicit selection by the user as context if the last active document had a selection.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing the active document with selection or <see langword="null" /> if nothing is selected.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotInteractionService">
            <summary>
            Provides functionality for generating, displaying and promptifying <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteraction">interactions</see>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotInteractionService.GetContextReferencesAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable.GetContextReferencesAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable">
            <summary>
            Represents a provider of a mentionable components that can be queried for those mentions.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextQueryable" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" />
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" />
            <remarks>
            Your <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider">context provider</see> or agent <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> implements
            this in order to serve up completion items that it has to offer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)">
            <summary>
            Query the mentionable provider for potential pieces of context or scopes with input based on <paramref name="query" />.
            </summary>
            <param name="query">The query to match against.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A list of possible context that partially or fully matches <paramref name="query" />. Empty if there are none.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotMentionQueryable.NavigateToMentionableAsync(Microsoft.VisualStudio.Copilot.CopilotQueriedMention,System.Threading.CancellationToken)">
            <summary>
            Navigates to the mention in the UI. Invoked when the user clicks a <see cref="P:Microsoft.VisualStudio.Copilot.CopilotQueriedMention.IsNavigable">navigable</see> mention.
            </summary>
            <param name="mention">A mention to navigate to.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><see langword="true" /> if the context was navigated to successfully, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotScope">
            <summary>
            A 'scope' is a service that can provide related context to a request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotScope.GetInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the metadata for this scope.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>The information describing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotScope.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotInteraction,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)">
            <summary>
            Gets related context for the provided <paramref name="interaction" />.
            </summary>
            <param name="interaction">The copilot interaction that this scope is being asked about.</param>
            <param name="inputs">Any inputs to the scope.</param>
            <param name="cancellation">Cancellation for querying the context.</param>
            <returns>Context related to the <paramref name="interaction" />.</returns>
            <remarks>
            <para>
            One scope's determination of relatability is not comparable to another, so scopes should order their return context
            from most to least related. Scopes should use their own heuristics to determine cut off points for the relatability
            of the context to return rather than simply returning everything ordered.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter">
            <summary>
            Provides a mechanism to count the tokens of a given string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter.CountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Count tokens in a piece of text.
            </summary>
            <param name="text">The text needs to be tokenized.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>The exact token count.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter.TrimSuffixByTokenCountAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The function trimmed a piece of text by suffix based on token count needs to be preserved.
            </summary>
            <param name="text">Text to be trimmed by suffix based on token count.</param>
            <param name="count">Max token count to be preserved.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTokenCounter.TrimPrefixByTokenCountAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The function trimmed a piece of text by prefix based on token count needs to be preserved.
            </summary>
            <param name="text">Text to be trimmed by prefix based on token count.</param>
            <param name="count">Max token count to be preserved.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.SymbolContext">
            <summary>
            Represents the context of a symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Reference">
            <summary>
            Gets the reference of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Kind">
            <summary>
            Gets the kind of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Description">
            <summary>
            Gets the description of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.AdditionalInformation">
            <summary>
            Gets the additional information of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.File">
            <summary>
            Gets the file of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Line">
            <summary>
            Gets the line of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Project">
            <summary>
            Gets the project of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Language">
            <summary>
            Gets the language of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Icon">
            <summary>
            Gets the icon of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SymbolContext.Snippet">
            <summary>
            Gets the code snippet for the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.SymbolContext.SymbolKind">
            <summary>
            Represents the kind of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CopilotService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the Visual Studio copilot service.
            Use the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateContextProviderDescriptor(System.String)">
            <summary>
            Creates a descriptor for use for interacting with <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> extensions.
            </summary>
            <param name="contextProviderMonikerName">The name on the moniker that will activate the context provider.</param>
            <returns>The descriptor for use when requesting activation of the context provider or when proffering the context provider to a brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateContextProviderDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Creates a descriptor for use for interacting with <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider" /> extensions.
            </summary>
            <param name="contextProviderMoniker">The moniker that will activate the context provider.</param>
            <returns>The descriptor for use when requesting activation of the context provider or when proffering the context provider to a brokered service container.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.Monikers.CurrentContextProviderVersion">
            <summary>
            The version that should be used when registering context (those that will use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotDescriptors.CreateContextProviderDescriptor(System.String)" />).
            </summary>
            <remarks>
            This version number will increment whenever a breaking change is made so that it's clear to both sides which behavior is expected from the remote side.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotDescriptors.Monikers.AllResponderVersions">
            <summary>
            A list of all historical responder versions in descending order. Used to locate responders that are compatible with a given version.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions">
            <summary>
            Options for making a direct request with.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.SendDirectRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.ActiveResponses">
            <summary>
            Gets a value indicating whether to automatically generate active (streaming) responses.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions.History">
            <summary>
            Gets the history items to include with the request (not including the request); <see langword="null" /> automatically includes all history.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotExclusionService">
            <summary>
            Service for managing the exclusion of content in Copilot Chat.
            </summary>
            <remarks>
            This service provides methods to check if a file or any file in a solution is excluded.
            It also provides a method to check the exclusion status for a list of files.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsFileExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a specific file is excluded.
            </summary>
            <param name="filePath">The path of the file to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A boolean value indicating whether the file is excluded or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.IsAnyFileExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if any file in the provided workspace is excluded.
            </summary>
            <param name="workspacePath">The path of the workspace to check for excluded files.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A boolean value indicating whether any file is excluded.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotExclusionService.CheckFilesExclusionStatusAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Checks the exclusion status for a list of files.
            </summary>
            <param name="filesNames">A list of file names to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A dictionary where the key is the file name and the value is a boolean indicating whether the file is excluded.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Explain">
            <summary>
            The intention of the associated request is to explain a specific subject specified in the content.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Answer">
            <summary>
            The intention of the associated request is to answer a general question or a specific question about provided context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Fix">
            <summary>
            The intention of the associated request is to fix an issue with the provided code or context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Generate">
            <summary>
            The intention of the associated request is to generate new code based on the content and any provided context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Modify">
            <summary>
            The intention of the associated request is to modify the provided code or context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Optimize">
            <summary>
            THe intention of the associated request is to modify the provided code or context to improve its performance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.CreateTest">
            <summary>
            The intention of the associated request is to generate tests for the provided code or context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.AskVS">
            <summary>
            The intention of the associated request is to get details on how specific task could be achieved in VS and supply the user with information about the VS Command to achieve that.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Code">
            <summary>
            The intention of the associated request is to generate or modify code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.Document">
            <summary>
            The intention of the associated request is to document code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.None">
            <summary>
            No intent. Pass the request directly through.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.ExplainException">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotIntent.AnalyzeConversation">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.CorrelationId">
            <inheritdoc cref="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.CorrelationId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.MessageId">
            <inheritdoc cref="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.MessageId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context">
            <summary>
            Gets the context provided or obtained for this interaction.
            </summary>
            <remarks>
            <para>
            For requests, this context will include anything that was pre-supplied.
            </para>
            <para>
            For responses, this context will include anything that was supplied in the request,
            as well as any context obtained and included during the response pipeline.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Content">
            <summary>
            Gets the ordered content parts of this interaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Metadata">
            <summary>
            Gets the metadata associated with this interaction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet">
            <summary>
            Represents a piece of a prompt meant for consumption by a model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet" /> class.
            </summary>
            <param name="prompt">The contents of this prompt snippet.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotPromptSnippet.Prompt">
            <summary>
            Gets the contents of the snippet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Intent">
            <summary>
            Gets the general intent of the request. <see langword="null" /> enables automatic detection of intent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Guidance">
            <summary>
            Gets additional guidance for the handling of the request content.
            </summary>
            <remarks>
            <para>
            Guidance will be provided to the model in additional to any guidance that may be supplied by way of a
            selected <see cref="P:Microsoft.VisualStudio.Copilot.CopilotRequest.Intent" />.
            </para>
            <para>
            You can consider this similar to setting or appending to the system prompt.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotRequestExtensions.GetFirstCommand(Microsoft.VisualStudio.Copilot.CopilotRequest)">
            <summary>
            Gets the name of the first command in the request.
            </summary>
            <param name="self">The request to look for commands in.</param>
            <returns>The <see cref="P:Microsoft.VisualStudio.Copilot.CopilotCommandMention.Name" /> of the first command in the request, or <see langword="null" /> if there is none.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotResponse">
            <summary>
            Represents a response to a copilot request.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotRequest" />
            <remarks>
            A response instance is the final state of a response, it is no longer updating.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.InteractionId">
            <summary>
            Gets the interaction ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.SessionId">
            <inheritdoc cref="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.SessionId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.Author">
            <summary>
            Gets the author of this interaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.Status">
            <summary>
            Gets the final status of the response.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponse.FollowUps">
            <summary>
            Gets the example prompts that can be displayed below the response to ask follow up questions.
            </summary>
            <remarks>
            Is this essential for first release?
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.Failure">
            <summary>
            Generic error
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.ContentFilter">
            <summary>
            Content filter error
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.MaxTokens">
            <summary>
            Max tokens error
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.UserHasNoChatAccess">
            <summary>
            User does not have chat access
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.OffTopic">
            <summary>
            Not development related question
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotResponseStatus.ContentFilterSnippy">
            <summary>
            Content filter error due to public code match filter 'Snippy'.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions.ProvideUI">
            <summary>
            Gets a value indicating whether to provide UI for this session.
            </summary>
            <remarks>
            <para>
            When <see langword="false" />, this creates a new session for interacting
            with the underlying provider but does not create any UI for presenting it.
            </para>
            <para>
            When <see langword="true" />, this gets or creates a top-level session integrated
            to a provided UI. The nature of the top level UI is determined by the service, where it may be a single
            top-level chat session or it may create a new isolated chat session.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.String,System.DateTime,Microsoft.VisualStudio.Copilot.CopilotSessionParticipant,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.SerializedObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionInfo" /> class.
            </summary>
            <param name="id">The id of the session.</param>
            <param name="name">The name for this session for UI display. Optional.</param>
            <param name="timeCreated">The time the session was created.</param>
            <param name="user">The end user who is chatting with Copilot.</param>
            <param name="metadata">Additional metadata for the session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.Name">
            <summary>
            Gets the name of the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.User">
            <summary>
            Gets the session user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.TimeCreated">
            <summary>
            Gets the time when the session is created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.Id">
            <summary>
            Gets the id of the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.Metadata">
            <summary>
            Gets additional metadata for the session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionInfo.ClientId">
            <summary>
            Gets the client id for the session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotSessionOptions">
            <summary>
            Options used during the creation of a Copilot session.
            </summary>
            <param name="ClientId">The client Id to use for the session.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Options used during the creation of a Copilot session.
            </summary>
            <param name="ClientId">The client Id to use for the session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.ClientId">
            <summary>The client Id to use for the session.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.DefaultResponder">
            <summary>
            Gets the default responder to use for the session. Defaults to the built-in Copilot responder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.Name">
            <summary>
            Gets an optional name for the session. Used primarily for sessions that are attached to UI-visible threads.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.ShouldPersist">
            <summary>
            Gets a value indicating whether the session should persist across restarts of the IDE. Defaults to false.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionOptions.Metadata">
            <summary>
            Gets the metadata to associate with the session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotSessionStatus.Available">
            <summary>
            The session is currently available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotSessionStatus.UnavailableAuth">
            <summary>
            The session is unavailable because the user is currently signed out.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotSessionStatus.Closed">
            <summary>
            The session has been closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotThread">
            <summary>
            Represents an individual thread in the Copilot UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThread.#ctor(Microsoft.VisualStudio.Copilot.ICopilotSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThread" /> class.
            </summary>
            <param name="session">The session backing the thread.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotThread.Session">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> backing the thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThread.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThread.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotThreadOptions">
            <summary>
            Options for creating a new Copilot thread.
            </summary>
            <devnote>
            Threads have a HAS-A (not IS-A) relationship with sessions, so thread
            options have a HAS-A (not IS-A) relationship with session options.
            </devnote>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThreadOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionOptions)">
            <summary>
            Options for creating a new Copilot thread.
            </summary>
            <devnote>
            Threads have a HAS-A (not IS-A) relationship with sessions, so thread
            options have a HAS-A (not IS-A) relationship with session options.
            </devnote>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotThreadOptions.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThreadOptions" /> class.
            </summary>
            <param name="clientId">The identifier for the client of the thread.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotThreadOptions.ClientId">
            <summary>
            Gets the identifier for the client of the thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotValue">
            <summary>
            A container for values used in <see cref="T:Microsoft.VisualStudio.Copilot.CopilotContext" /> or <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.#ctor(System.String,Microsoft.VisualStudio.Copilot.SerializedObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" /> class.
            </summary>
            <param name="copilotTypeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.DefaultCopilotTypes" />.</param>
            <param name="valueContainer">Serialized object value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotValue" /> class.
            </summary>
            <param name="copilotTypeName">Copilot context value type name which could be a custom context type name or one of <see cref="T:Microsoft.VisualStudio.Copilot.DefaultCopilotTypes" />.</param>
            <param name="value">Value to be serialized, this value must be MessagePack serializable.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.ValueContainer">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value">object</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.CopilotTypeName">
            <summary>
            Gets the Copilot type moniker of the value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotValue.Value">
            <summary>
            Gets the value of the context or null if value could not be deserialized or type is not available.
            </summary>
            <remarks>
            The object must be serializable via MessagePack and object value can not be null.
            For type checks, recommendation is to use <see cref="M:Microsoft.VisualStudio.Copilot.CopilotValue.Is``1" /> instead as it will avoid unnecessary deserialization.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Throw when value passed to init is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.Is``1">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.Is``1" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.TryGetValue``1(``0@)">
            <summary>
            Tries to get the serialized value casting it to the provided type.
            </summary>
            <typeparam name="T">Type to cast value to.</typeparam>
            <param name="returnValue">Reference to store the returned value.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotValue.Equals(Microsoft.VisualStudio.Copilot.CopilotValue)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Formatters.DictionaryStringObjectFormatter">
            <summary>
            A formatter that is hard-coded to use the <see cref="T:MessagePack.Formatters.TypelessFormatter" /> for values in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotCommand">
            <summary>
            A command that can be executed on the response, manually or automatically.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ICopilotCommand.Title">
            <summary>
            Gets the title for the command UI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService">
            <summary>
            Service for managing Copilot component registrations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterContextProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotContextProvider">copilot context provider</see>.
            </summary>
            <param name="providerMoniker">The moniker that may be used to activate the context provider when needed.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterScopeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotScope">copilot scope</see>.
            </summary>
            <param name="scopeMoniker">The moniker that may be used to activate the scope when needed.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)">
            <summary>
            Registers an agent with the provided metadata.
            </summary>
            <param name="agentIdentity">Information required to register an agent. The agent service will not be queried until it is added to a conversation.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.UnregisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)">
            <summary>
            Unregisters an agent that was assigned the provided moniker from the service.
            </summary>
            <param name="agentIdentity">Agent identity to unregister.</param>
            <param name="cancellation">Cancellation token to monitor.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotService">
            <summary>
            Visual Studio service that can be queried via service broker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.SubscribeToAvailabilityAsync(System.IObserver{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Subscribes to availability status notifications.
            </summary>
            <param name="availabilityObserver">An observer that will receive notifications based on availability. An initial notification will be sent immediately to inform of the current state.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A value that may be disposed of to cancel the subscription.</returns>
            <remarks>
            When the service is not available, any existing <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> becomes invalid, even if the service was available before and after an unavailability event.
            </remarks>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotService.CheckAvailabilityAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.CheckAvailabilityAsync(System.Threading.CancellationToken)">
            <summary>
            Checks whether the conversation service is currently available.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotService.SubscribeToAvailabilityAsync(System.IObserver{System.Boolean},System.Threading.CancellationToken)" />.
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionAsync(Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionAsync(Microsoft.VisualStudio.Copilot.CopilotServiceSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets or creates a copilot session.
            </summary>
            <param name="options">Options to apply to the session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Copilot session data. It must be disposed of by the caller.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the service is not available.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets or creates a copilot session without UI.
            </summary>
            <param name="options">Options to apply to the session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Copilot session data. It must be disposed of by the caller.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the service is not available.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartThreadAsync(Microsoft.VisualStudio.Copilot.CopilotThreadOptions,System.Threading.CancellationToken)">
            <summary>
            Starts a new thread in the Copilot chat UI.
            </summary>
            <param name="options">The options to start the thread with.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartRefinementSessionAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},System.Threading.CancellationToken)">
            <summary>
            Starts an inline refinement session with the proposed edits.
            </summary>
            <param name="edits">The initial edits to propose.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            Starting a refinement session will cancel any existing refinement or inline session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartRefinementSessionAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Copilot.CopilotInteractionId,System.Threading.CancellationToken)">
            <summary>
            Starts an inline refinement session with the proposed edits.
            </summary>
            <param name="edits">The initial edits to propose.</param>
            <param name="originatingInteractionId">The ID of the interaction from which the code suggestion originated from.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            Starting a refinement session will cancel any existing refinement or inline session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.ShowSessionAsync(Microsoft.VisualStudio.Copilot.ICopilotSession,System.Threading.CancellationToken)">
            <summary>
            Attempt to show the UI associated with the provided <paramref name="session" />.
            </summary>
            <param name="session">The session to display the UI for.</param>
            <param name="cancellation">Cancellation token.</param>
            <remarks>
            For a session that has already been closed, or if a session that was not created with UI, this will
            no-op.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.ShowOutputLogsAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the output window for the Copilot service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetCopilotSessionsAsync(Microsoft.VisualStudio.Copilot.CopilotSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Get all current sessions
            </summary>
            <param name="options">Options to apply to the session.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of sessions</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetThreadsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all current threads.
            </summary>
            <param name="persistencePath">The persistence path for the threads to return.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of threads</returns>
            <remarks>
            The caller is responsible for disposing the returned <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThread" /> instances.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetThreadsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all current threads.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of threads</returns>
            <remarks>
            The caller is responsible for disposing the returned <see cref="T:Microsoft.VisualStudio.Copilot.CopilotThread" /> instances.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.GetSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            Gets a session given a copilot session identifier, if there is no such session this method will return null.
            </summary>
            <param name="sessionId">Session identifier.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> instance if a session with the given id is available, null otherwise.
            </returns>
            <remarks>
            This method returns a wrapper that is disposable only for purposes of disposing the proxy and will not dispose
            the actual session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.StartInlineSessionAsync(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Copilot.CopilotClientId,System.Threading.CancellationToken)">
            <summary>
            Starts an inline session at the start position of point.
            </summary>
            <param name="point">The position to show inline session.</param>
            <param name="clientId">The identifier for the client of the session.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotService.EndSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            End a copilot session.
            </summary>
            <param name="sessionId">Session identifier.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <remarks>No-op when deleting a non-existent session.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetSessionInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get Copilot session info of this session (user, time created and id).
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>the session info.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SubscribeInteractionsAsync(System.IObserver{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotInteraction}},System.Threading.CancellationToken)">
            <summary>
            Subscribes to the interactions (queries and responses) in this session.
            </summary>
            <remarks>
            Observers will be sent the current list of interactions (if non-empty), and lists of new interactions that were appended.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetInteractionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a snapshot of the interactions up to this point.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A snapshot of the interactions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.EndAsync(System.Threading.CancellationToken)">
            <summary>
            Ends the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> for all the users.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>Unlike Dispose(), which only cleans up the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> proxy for the caller, this method permanently ends the
            session for all <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> proxy instances that point to the same underlying session.
            Call any methods after <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.EndAsync(System.Threading.CancellationToken)" /> result in an <see cref="T:System.ObjectDisposedException" /> being thrown.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SendRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Threading.CancellationToken)">
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SubscribeActiveInteractionListenerAsync(Microsoft.VisualStudio.Copilot.ICopilotActiveInteractionListener,System.Threading.CancellationToken)">
            <summary>
            Registers a listener that may hook up to live stream interactions.
            </summary>
            <param name="listener">The listener.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.GetRespondersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the responders attached to the session.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A list of responders attached to the session with the default in the first position.</returns>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSession.AddResponderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Adds a responder provider to this session.
            </summary>
            <param name="responderProviderService">The service moniker for the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The async operation</returns>
            <seealso cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotTypeProvider.PromptifyAsync(Microsoft.VisualStudio.Copilot.CopilotValue,System.Threading.CancellationToken)">
            <summary>
            Converts a the context data object <paramref name="typeValue" /> into a snippet of a prompt to be sent to a model.
            </summary>
            <param name="typeValue">Type and object to convert into a prompt snippet..</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A model prompt representation of the <paramref name="typeValue" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotClientId">
            <summary>
            A string which identifies a client for a session.  This should be a dotted string
            similar to a namespace specifier, such as "Company.Product.Team.Feature[.Subfeature]".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotClientId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotClientId" /> class.
            </summary>
            <param name="id">The string which identifies a client for a session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotClientId.Id">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId">
            <summary>
            A guid which links to the origin of a request and any responses related to it. Each initiated request has a unique CorrelationId.
            </summary>
            <param name="Guid">The guid that correlates to the originating request.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotCorrelationId.#ctor(System.Guid)">
            <summary>
            A guid which links to the origin of a request and any responses related to it. Each initiated request has a unique CorrelationId.
            </summary>
            <param name="Guid">The guid that correlates to the originating request.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotCorrelationId.Guid">
            <summary>The guid that correlates to the originating request.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId">
            <summary>
            Represents the identifiers for a specific Copilot interaction, whether active or finished.
            </summary>
            <param name="SessionId">The id for the conversation this interaction was a part of.</param>
            <param name="CorrelationId">The correlation id for this interaction. This id will match between requests and any responses to those requests.</param>
            <param name="MessageId">The id for the specific message.</param>
            <remarks>
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /> is associated with a session (e.g. the visible chat window).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> is a shared ID between a request and its response(s).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMessageId" /> is given to each request and each response.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)">
            <summary>
            Represents the identifiers for a specific Copilot interaction, whether active or finished.
            </summary>
            <param name="SessionId">The id for the conversation this interaction was a part of.</param>
            <param name="CorrelationId">The correlation id for this interaction. This id will match between requests and any responses to those requests.</param>
            <param name="MessageId">The id for the specific message.</param>
            <remarks>
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /> is associated with a session (e.g. the visible chat window).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> is a shared ID between a request and its response(s).
            A <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMessageId" /> is given to each request and each response.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.SessionId">
            <summary>The id for the conversation this interaction was a part of.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.CorrelationId">
            <summary>The correlation id for this interaction. This id will match between requests and any responses to those requests.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.MessageId">
            <summary>The id for the specific message.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId" /> struct.
            for an existing conversation, where new correlation and message IDs will be generated.
            </summary>
            <param name="conversationId"><inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)" path="/param[@name='ConversationId']" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotInteractionId" /> struct
            for an existing conversation and correlation ID, where a new message ID will be generated.
            </summary>
            <param name="conversationId"><inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)" path="/param[@name='ConversationId']" /></param>
            <param name="correlationId"><inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotInteractionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,Microsoft.VisualStudio.Copilot.CopilotMessageId)" path="/param[@name='CorrelationId']" /></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotInteractionId.ClientId">
            <summary>
            Gets the id of the client for the interaction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotMessageId">
            <summary>
            Identifies an individual message associated with a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" />
            </summary>
            <param name="Guid"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotMessageId.#ctor(System.Guid)">
            <summary>
            Identifies an individual message associated with a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" />
            </summary>
            <param name="Guid"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotMessageId.Guid">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotSessionId">
            <summary>
            A guid uniquely identifying a 'Conversation' that exists in the service.
            These are created by the service at the time a Conversation is initiated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionId.#ctor(System.Guid,Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /> struct.
            </summary>
            <param name="guid">The guid that uniquely identifies the conversation.</param>
            <param name="clientId">The identifier for the client of the conversation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotSessionId.#ctor(Microsoft.VisualStudio.Copilot.CopilotClientId)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.CopilotSessionId.#ctor(System.Guid,Microsoft.VisualStudio.Copilot.CopilotClientId)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionId.Guid">
            <summary>
            Gets the guid that uniquely identifies the conversation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotSessionId.ClientId">
            <summary>
            Gets the identifier for the client of the conversation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IFormatTextEditProvider.FormatTextEditAsync(Microsoft.VisualStudio.Copilot.Internal.TextEdit,Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <summary>
            Format the TextEdit, return a formatted TextEdit
            </summary>
            <param name="textEdit">The text edit that we want to format.</param>
            <param name="snapshot">A text snapshot we want to format.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.ILanguageCodeFileMapper.GetFileNameFromContentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Evaluates a content string and returns a file name if it can be determined.
            </summary>
            <param name="content">The code content.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Returns the file name of the given content, or null when no file name could be determined.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.MappingTarget.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.Internal.MappingTarget" /> class.
            </summary>
            <param name="focusArea"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.MappingTarget.Caret">
            <summary>
            Gets a caret position if one was supplied, or <see langword="null" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.SourceNode.IdentifierName">
            <summary>
            Gets the name of the node's identifier.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.SourceNode.ToFullString">
            <summary>
            Returns a string representation of the node.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor">
            <summary>
            Serialized form of a CopilotFunctionGroup.
            </summary>
            <param name="Name">A single-token / word representing the name of the plan.</param>
            <param name="Description">A high-level description for what's possible with the function group's <paramref name="FunctionDescriptors" />.</param>
            <param name="FunctionDescriptors">The list of function descriptors the plan intent can utilize.</param>
            <param name="Examples">A collection of examples representing what the <see cref="T:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor" /> is capable of.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionDescriptor},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.Planning.PlanLangExample})">
            <summary>
            Serialized form of a CopilotFunctionGroup.
            </summary>
            <param name="Name">A single-token / word representing the name of the plan.</param>
            <param name="Description">A high-level description for what's possible with the function group's <paramref name="FunctionDescriptors" />.</param>
            <param name="FunctionDescriptors">The list of function descriptors the plan intent can utilize.</param>
            <param name="Examples">A collection of examples representing what the <see cref="T:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor" /> is capable of.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor.Name">
            <summary>A single-token / word representing the name of the plan.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor.Description">
            <summary>A high-level description for what's possible with the function group's <paramref name="FunctionDescriptors" />.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor.FunctionDescriptors">
            <summary>The list of function descriptors the plan intent can utilize.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor.Examples">
            <summary>A collection of examples representing what the <see cref="T:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor" /> is capable of.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunction">
            <summary>
            Decorate with <c>CopilotFunctionAttribute</c> to describe the purpose of this function and <c>CopilotFunctionInputAttribute</c> to indicate any inputs. These decorations will influence how plans are constructed. They'll take into account each function's description and input descriptions to decide when &amp; how to call a <c>CopilotFunction</c>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunction.InvokeAsync(Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionContext,System.Threading.CancellationToken)">
            <summary>
            Performs a generic action as defined by <c>CopilotFunctionAttribute.Description</c>. <see cref="T:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionContext" /> will contain arguments specified in your <c>CopilotFunctionInputAttribute</c>'s.
            </summary>
            <param name="context">Information needed to execute the function</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>
            - Successful invocation with output: <see cref="M:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionOutput.Success(System.Object)" />
            - Successful invocation no output: <see cref="F:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionOutput.Void" /> or <see cref="F:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionOutput.VoidTask" />
            - Unsuccessful invocation: <see cref="M:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionOutput.Fail(System.String)" />
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionGroup">
            <summary>
            A function group implementation associated with a <see cref="T:Microsoft.VisualStudio.Copilot.Internal.Planning.CopilotFunctionGroupDescriptor" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionGroup.GetExamplesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the examples for functions in this group.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionGroup.GetDescriptorAsync(Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionRegistry,System.Threading.CancellationToken)">
            <summary>
            Gets the descriptor for function group including function descriptors.
            </summary>
            <param name="registry">Aggregating function registry instance for group implementation to query for function descriptors if external functions are used.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionRegistry.GetDescriptorsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the descriptors for functions served by this registry. Note that this collection may be large in cases
            where this is an aggregating registry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionRegistry.TryGetFunctionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an instance of a function with the provided unique identifier.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.ICopilotFunctionRegistry.TryGetDescriptorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the descriptor for an individual function with its unique identifier.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Internal.Planning.PlanLangExample">
            <summary>
            Represents an example of a plan in PlanLang.
            </summary>
            <param name="Goal">The goal</param>
            <param name="Plan">The PlanLang statements used to accomplish the <paramref name="Goal" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Internal.Planning.PlanLangExample.#ctor(System.String,System.String)">
            <summary>
            Represents an example of a plan in PlanLang.
            </summary>
            <param name="Goal">The goal</param>
            <param name="Plan">The PlanLang statements used to accomplish the <paramref name="Goal" /></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.Planning.PlanLangExample.Goal">
            <summary>The goal</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Internal.Planning.PlanLangExample.Plan">
            <summary>The PlanLang statements used to accomplish the <paramref name="Goal" /></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentCalling">
            <summary>
            Specifies when an agent should be called to respond.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotAgentCalling.Directly">
            <summary>
            Call the agent only when it is the default responder or is mentioned directly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity">
            <summary>
            Identifies an agent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,System.String,Microsoft.VisualStudio.Copilot.CopilotImageMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity" /> class.
            </summary>
            <param name="service">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider" /> service.</param>
            <param name="shortName">The short name used for mentions.</param>
            <param name="name">The name to display for responses from this agent.</param>
            <param name="icon">The avatar used to to display for responses from this agent.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.Calling">
            <summary>
            Gets the method as to when this agent should be called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.ShortName">
            <summary>
            Gets the short name of the agent used to mention it. (ex. "foo" for @foo).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.ShortDescription">
            <summary>
            Gets a short user-visible description of the agent for display in completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentIdentity.Description">
            <summary>
            Gets a longer user-visible description of the agent for display when users choose an agent starting a new thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotRespondArgs">
            <summary>
            Provides arguments for <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)" /> call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.String,Microsoft.VisualStudio.Copilot.CopilotImageMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity" /> class.
            </summary>
            <param name="service">The <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider">responder provider service</see> that owns this responder.</param>
            <param name="name">The full displayed name of the responder.</param>
            <param name="icon">The image moniker for the responders avatar.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity.Service">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider">responder provider service</see> that owns this responder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponder">
            <summary>
            Represents a Copilot session responder.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.AddResponderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)" />
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)">
            <summary>
            Respond to a given <paramref name="request" />.
            </summary>
            <param name="broker">The broker for the responder to issue model requests through. Dispose before exiting.</param>
            <param name="request">The request.</param>
            <param name="respondArgs">Arguments defining how the responder should behave.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>0 or more completed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" />.</returns>
            <remarks>
            <paramref name="broker" /> is a <see cref="T:StreamJsonRpc.RpcMarshalableAttribute" /> proxy and must be disposed before exiting.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker">
            <summary>
            A broker offering base services to a responder.
            </summary>
            <remarks>
            Brokers are created on a per-responder basis; the broker a responder receives is associated with their <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponderIdentity">identity</see>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.SendDirectRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotDirectRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a direct request to the model.
            </summary>
            <param name="request">The request to send.</param>
            <param name="options">Options for making the request.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>1 or more completed <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderBroker.CreateResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a response builder for manually streaming and generating a response.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>A response builder.</returns>
            <remarks>
            <para>
            Calling this will cause the parent <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> to proffer a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" />. For sessions that are UI based,
            this means that pushing content to the returned builder will stream it directly to the UI. It is expected that <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder.FinishAsync(Microsoft.VisualStudio.Copilot.CopilotResponseStatus,System.Threading.CancellationToken)" />
            is called and that a matching <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" /> (<see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.CorrelationId" /> and <see cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.MessageId" />) is
            returned from <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotResponder.RespondAsync(Microsoft.VisualStudio.Copilot.ICopilotResponderBroker,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotRespondArgs,System.Threading.CancellationToken)" />.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider">
            <summary>
            Brokered service that provides <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotResponder">responders</see> per <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession">session</see>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider.GetIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the identity of the responder.
            </summary>
            <param name="cancellation">Cancellation token.</param>
            <returns>The identity of the responder.</returns>
            <remarks>
            For agents, the identity returned here must match that which is provided to <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotRegistrationService.RegisterAgentAsync(Microsoft.VisualStudio.Copilot.CopilotAgentIdentity,System.Threading.CancellationToken)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponderProvider.CreateResponderAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            Create a responder for a specific <paramref name="sessionId">session</paramref>.
            </summary>
            <param name="sessionId">The id of the session ot create the session for.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A new responder for this session.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.SerializedObject">
             <summary>
             A <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> is a wrapper around any MessagePack-serializable object which defers deserialization until requested.
             This allows serialized objects to be passed around in a type-agnostic way without the need to deserialize them until they are actually needed.
             This enables extensions to use custom types in Copilot that can be safely serialized without Copilot needing access to the assembly that defines
             the type. The types can be serialized in the extension before being sent to Copilot and then deserialized back in the extension after retrieving
             from Copilot.
             </summary>
             <example>
             To create a serialized object out of an arbitrary MessagePack-serializable object, simply call <see cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create``1(``0)" />."/&gt;
            
             <code>
             var serializedObject = SerializedObject.Create(new MyCustomType());
             </code>
            
             The inner object you provide is serialized into a raw byte stream inside the <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" />, allowing the
             <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> to be safely passed across process boundaries or stored to disk.
            
             To deserialize the object, call <see cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryGetValue``1(``0@)" />. Deserialization will only succeed if the original type of the
             serialized object matches the requested type T.
            
             <code>
             if (serializedObject.TryGetValue(out MyCustomType value))
             {
                 // use value here
             }
             </code>
            
             If you need to deserialize into a different type than was originally serialized (but which is still compatible with the
             original MessagePack schema), you can call <see cref="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryDeserialize``1(``0@)" /> which will attempt to deserialize the object into any
             type you request, regardless of the original type. This is useful in some backwards compatibility scenarios to attempt deserialization
             into a new type when the original type is no longer available or had breaking changes.
             </example>
             <remarks>
             Objects stored inside a <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> should not be mutated after the <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> is created since the exact
             timing of the serialization (and thus the snapshot of object contents) is not controlled by the caller.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.#ctor(System.String,System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> class.
            </summary>
            <param name="typeName">Assembly qualified type name of the data type stored.</param>
            <param name="data">A sequence of bytes in MessagePack format.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.TypeName">
            <summary>
            Gets the type name of the serialized object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.Data">
            <summary>
            Gets a sequence of bytes in MessagePack format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.SerializedObject.Length">
            <summary>
            Gets the length in bytes of the fragment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> from a value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">Copilot context value to serialize, this value must be serializable by MessagePack.</param>
            <returns>an instance containing serialized data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Create(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Copilot.SerializedObject" /> using GetType to get the target type.
            </summary>
            <param name="value">Copilot context value to serialize, this value must be serializable by MessagePack.</param>
            <returns>an instance containing serialized data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryGetValue``1(``0@)">
            <summary>
            Tries to get the serialized value as the provided type if stored type is assignable to T.
            </summary>
            <typeparam name="T">Type to check for.</typeparam>
            <returns>Returns true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.TryDeserialize``1(``0@)">
            <summary>
            Tries to deserialize stored data to passed in type.
            </summary>
            <typeparam name="T">Type to deserialize to.</typeparam>
            <returns>Returns true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Is``1">
            <summary>
            Checks if stored type is of the provided type T.
            </summary>
            <typeparam name="T">Type to check against.</typeparam>
            <returns>True if stored type information matches T, false if not or if stored type can not be loaded in given process.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SerializedObject.Equals(Microsoft.VisualStudio.Copilot.SerializedObject)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext">
            <summary>
            Describes a subscription for an active interaction.
            </summary>
            <param name="InteractionId">The ID of the interaction being tracked.</param>
            <param name="ActiveInteraction">The streaming interface.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext.#ctor(Microsoft.VisualStudio.Copilot.CopilotInteractionId,Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction)">
            <summary>
            Describes a subscription for an active interaction.
            </summary>
            <param name="InteractionId">The ID of the interaction being tracked.</param>
            <param name="ActiveInteraction">The streaming interface.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext.InteractionId">
            <summary>The ID of the interaction being tracked.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotActiveInteractionContext.ActiveInteraction">
            <summary>The streaming interface.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction">
            <summary>
            The progressive interaction between UI and the message pipeline.
            </summary>
            <remarks>
            Implement and provide this type to receive progress indications about steps,
            approve or deny side-effect steps, provide streaming content sinks and enable
            post processing steps for individual blocks.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.UpdatePartAsync(Microsoft.VisualStudio.Copilot.CopilotContentPartId,Microsoft.VisualStudio.Copilot.CopilotPartState,System.Threading.CancellationToken)">
            <summary>
            Update a content part's current state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of <see cref="P:Microsoft.VisualStudio.Copilot.CopilotPartState.NewContent" /> doesn't match the original type.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveInteraction.UpdateContextAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Updates the context used in the interaction to reflect context used in this interaction step.
            </summary>
            <param name="context">The new list of context for the interaction.</param>
            <param name="cancellation">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse">
            <summary>
            Represents a response that is still in flight.
            </summary>
            <remarks>
            <para>
            While <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse" /> represents a fully completed response, <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" /> is the
            sink for events (such as streaming content) from an in-flight response.
            </para>
            <para>
            For each final response that a responder begins to generate, <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> will offer its
            <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotSession.SubscribeActiveInteractionListenerAsync(Microsoft.VisualStudio.Copilot.ICopilotActiveInteractionListener,System.Threading.CancellationToken)">subscribers</see> the chance to provide a
            <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse" />. Generally this ends up being the UI providing its streaming UI implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotActiveResponse.FinishAsync(Microsoft.VisualStudio.Copilot.CopilotResponseStatus,System.Threading.CancellationToken)">
            <summary>
            Finishes the response with the given <paramref name="reason" />.
            </summary>
            <param name="reason">The reason that this response is finished.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder">
            <summary>
            Builds <see cref="T:Microsoft.VisualStudio.Copilot.CopilotResponse">responses</see> from streamed content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotResponseBuilder.FinishAsync(Microsoft.VisualStudio.Copilot.CopilotResponseStatus,System.Threading.CancellationToken)">
            <summary>
            Finishes building the response and returns the completed result.
            </summary>
            <param name="status">The status of the final response.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The completed response.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink">
            <summary>
            Represents a place for content to be streamed to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.BeginBlockAsync(Microsoft.VisualStudio.Copilot.StreamingContentBlockBase,System.Threading.CancellationToken)">
            <summary>
            Begins a new streamed block.
            </summary>
            <param name="block">A description of the type of content that will be received in this block.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.NotSupportedException">Thrown if called while there is already an open block if block nesting is not supported.</exception>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.WriteBlockContentsAsync(System.String,System.Threading.CancellationToken)" />
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.EndBlockAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.WriteBlockContentsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Writes content to the current block.
            </summary>
            <param name="content">Any amount of content to be added to the current block as-is.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current block.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.EndBlockAsync(System.Threading.CancellationToken)">
            <summary>
            Ends the current block.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.BeginBlockAsync(Microsoft.VisualStudio.Copilot.StreamingContentBlockBase,System.Threading.CancellationToken)" />
            <exception cref="T:System.InvalidOperationException">Thrown when called without a current block.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.WriteContentAsync(Microsoft.VisualStudio.Copilot.CopilotContentPart,System.Threading.CancellationToken)">
            <summary>
            Writes a whole content part.
            </summary>
            <param name="part">The content part to write to the stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when called while a <see cref="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.BeginBlockAsync(Microsoft.VisualStudio.Copilot.StreamingContentBlockBase,System.Threading.CancellationToken)">block</see> is open.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink.RedactAsync(System.Threading.CancellationToken)">
            <summary>
            Redacts the entire content received by this sink.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.StreamingContentBlockBase">
            <summary>
            Base class for content block metadata.
            </summary>
            <remarks>
            The subclasses of this class are largely to denote metadata for
            its contents.
            </remarks>
            <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotStreamingContentSink" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.StreamingTextContentBlock">
            <summary>
            A streaming content block of text.
            </summary>
            <remarks>
            This is generally Markdown text content.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock">
            <summary>
            A streaming content block of code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.StreamingCodeContentBlock.Language">
            <summary>
            Gets the language associated with this code block.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.TypelessMessagePackDescriptor.TypelessDescriptorMessagePackOptions">
             <summary>
             This options class is used to override LoadType to ensure type loads occur on the AssemblyLoadContext
             that loaded Copilot assemblies.
            
             In case of ServiceHub and extensibility scenarios, this will be extensions load context which will be able to resolve
             assemblies deployed by the extension.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.DisposableBag">
            <summary>
            A collection of disposable objects that should be disposed together when the collection is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.DisposableBag.disposables">
            <summary>
            The set of disposable blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DisposableBag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.DisposableBag" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.DisposableBag.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DisposableBag.Dispose">
            <summary>
            Disposes of all elements in the collection and clears the collection.
            </summary>
            <remarks>
            Any elements added to the collection later are instead immediately disposed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DisposableBag.AddDisposable(System.IDisposable)">
            <summary>
            Adds a value to be disposed of when this collection is disposed of.
            </summary>
            <param name="value">
            The value to be disposed of when this collection is disposed of.
            Will be disposed of immediately if this collection is already disposed of.
            May be <see langword="null" />.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DisposableBag.AddDisposables(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Adds values to be disposed of when this collection is disposed of or canceled.
            </summary>
            <param name="values">
            The value to be disposed of when this collection is disposed of.
            All elements will be disposed of immediately if this collection is already disposed of.
            Individual elements of the collection or the collection itself may be <see langword="null" />.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DisposableBag.RemoveDisposable(System.IDisposable)">
            <summary>
            Removes a disposable value from the collection.
            </summary>
            <param name="value">The value to remove. May be <see langword="null" />.</param>
            <remarks>
            No exception is thrown if the <paramref name="value" /> is not found in the collection.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.DisposableBag.DisposeCore">
            <summary>
            Invoked when this collection is disposed (for the first time)
            but before its contained elements are disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.IsLineBreak(System.Char)">
            <summary>
            Checks if a character is a line break character.
            </summary>
            <param name="character">The input character.</param>
            <returns>True if the input character is a line break character, else false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetFirstLine(System.String)">
            <summary>
            Gets the text before the first line break.
            </summary>
            <param name="text">The input string.</param>
            <returns>The first line of text.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineBreakText(System.String)">
            <summary>
            Determines the line break character of the input string.
            </summary>
            <param name="text">The input string.</param>
            <returns>The line break character of the input string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.NormalizeLineBreaks(System.String,Microsoft.VisualStudio.Text.ITextSnapshot,System.String@)">
            <summary>
            Normalizes the line breaks of a given original string by replacing the line break text with the target line break text.
            </summary>
            <param name="original">The original string to be normalized.</param>
            <param name="snapshot">The text snapshot to use for obtaining the target line break text.</param>
            <param name="targetLineBreak">The target line break text to use for normalization.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>ddYOGU6SZskgY0K9xwKwt8wXwjq8cDJX211N/ftq5NQ=</DigestValue></Reference></SignedInfo><SignatureValue>bvdTSXLOxy5oliwoabHcamGCVhwPgpYRfeC77zLp7RRouJIc/HyBpcdsSIaEo/UKhnDSA13BEoCmGwHkLnewfhmgqQNpyOCu70JISFfIMUqus/qKz+E3t2epgFq96c+QZ9g98iIT/3f+ThP9MsA28d/ReOoNAeUuk+QNeOZ6OWKrM4wSFBYhxg3rTnCOW2Gor2bQTI082qt1FtVtbj2NybOS/71Djea1qH234y3EEss400rcLqREL3/uBk3s/hZvyKW6Rc7eTK83dxRwsSb4NsdLSEmi1dn3/mqGrt4PhEiCrl5hsp4OKQ8b3/Qn+1QrZ0k3JKZZPCakYToQWhdLVw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY+YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkwHpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y+Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
