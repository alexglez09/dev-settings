<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot.Contracts.Internal</name>
    </assembly>
    <members>
        <member name="T:Conversations.Service.Contracts.ConversationModes">
            <summary>
            Collection of conversation modes that can be specified on a <see cref="P:Conversations.Service.Contracts.StartConversationOptions.CreationParameters" /> to control what type of
            conversation orchestrates a conversation.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.Default">
            <summary>
            The default chat pane conversation mode.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.Inline">
            <summary>
            The inline conversation mode.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.ExceptionHelper">
            <summary>
            The debugger conversation mode used for exception handling.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.CombinedExceptionHelper">
            <summary>
            The combined debugger conversation mode used for exception handling.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.MigrationHelper">
            <summary>
            The conversation mode used for migration handling.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.RemoteAgent">
            <summary>
            The conversation mode used for remote agents.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.ExperimentalChat">
            <summary>
            The conversation mode used for experimental chat pane.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ConversationModes.TypeScriptGuidedConversation">
            <summary>
            The conversation mode used for scripted chats.
            </summary>
        </member>
        <member name="M:Conversations.Service.Contracts.ConversationModes.TryGetMode(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Tries to get the conversation mode from the creation parameters. <see cref="M:Conversations.Service.Contracts.ConversationModes.AddMode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})" /> should have been called first prior.
            </summary>
            <param name="creationParameters">The creation parameters. Typically this is from <see cref="P:Conversations.Service.Contracts.StartConversationOptions.CreationParameters" /></param>
            <returns>The conversation mode if found, otherwise null.</returns>
        </member>
        <member name="M:Conversations.Service.Contracts.ConversationModes.AddMode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the conversation mode to the creation parameters. Can be retrieved via <see cref="M:Conversations.Service.Contracts.ConversationModes.TryGetMode(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})" />.
            </summary>
            <param name="mode">The conversation mode to add.</param>
            <param name="creationParameters">The creation parameters dictionary.</param>
        </member>
        <member name="M:Conversations.Service.Contracts.ConversationModes.ContainsMode(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Checks for the presence of a conversation mode in the specified creation parameters.
            </summary>
            <param name="creationParameters">The dictionary of creation parameters.</param>
            <returns>A value indicating if the creation parameters contains a conversation mode.</returns>
        </member>
        <member name="T:Conversations.Service.Contracts.CopilotFunctionGroups.ExplainFunctionGroupProvider">
            <summary>
            The Explain function group allows interaction with semantic Explain function apart from different semantic/syntactic context gathering functions.
            </summary>
        </member>
        <member name="M:Conversations.Service.Contracts.CopilotFunctionGroups.ExplainFunctionGroupProvider.TryCreateAsync(Conversations.Planning.CopilotFunctionRegistry,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Conversations.Service.Contracts.CopilotFunctionGroups.FilesFunctionGroupProvider">
            <summary>
            The Files function group allows interaction with Visual Studio's file system. It allows the opening/closing of files based on natural language requests.
            </summary>
        </member>
        <member name="M:Conversations.Service.Contracts.CopilotFunctionGroups.FilesFunctionGroupProvider.TryCreateAsync(Conversations.Planning.CopilotFunctionRegistry,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Conversations.Service.Contracts.CopilotFunctionGroups.FixFunctionGroupProvider">
            <summary>
            The fix
            </summary>
        </member>
        <member name="M:Conversations.Service.Contracts.CopilotFunctionGroups.FixFunctionGroupProvider.TryCreateAsync(Conversations.Planning.CopilotFunctionRegistry,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Conversations.Service.Contracts.CopilotFunctionGroups.ThemeFunctionGroupProvider">
            <summary>
            The Theme function group allows interaction with Visual Studio's theme system. It allows the retrieval or setting of Visual Studio's theme.
            </summary>
        </member>
        <member name="M:Conversations.Service.Contracts.CopilotFunctionGroups.ThemeFunctionGroupProvider.TryCreateAsync(Conversations.Planning.CopilotFunctionRegistry,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Conversations.Service.Contracts.ExceptionHelperModes">
            <summary>
            Collection of exception helper modes that can be specified on a <see cref="P:Conversations.Service.Contracts.StartConversationOptions.CreationParameters" /> to control how
            debugger conversations behave.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ExceptionHelperModes.Default">
            <summary>
            The default exception helper mode. One-shot response followed by conversation mode.
            </summary>
        </member>
        <member name="F:Conversations.Service.Contracts.ExceptionHelperModes.BeginWithConversation">
            <summary>
            The "new debugger conversation mode" exception helper mode.
            </summary>
        </member>
        <member name="M:Conversations.Service.Contracts.ExceptionHelperModes.TryGetMode(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Tries to get the conversation mode from the creation parameters. <see cref="M:Conversations.Service.Contracts.ExceptionHelperModes.AddMode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})" /> should have been called first prior.
            </summary>
            <param name="creationParameters">The creation parameters. Typically this is from <see cref="P:Conversations.Service.Contracts.StartConversationOptions.CreationParameters" /></param>
            <returns>The conversation mode if found, otherwise null.</returns>
        </member>
        <member name="M:Conversations.Service.Contracts.ExceptionHelperModes.AddMode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the conversation mode to the creation parameters. Can be retrieved via <see cref="M:Conversations.Service.Contracts.ExceptionHelperModes.TryGetMode(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})" />.
            </summary>
            <param name="mode">The conversation mode to add.</param>
            <param name="creationParameters">The creation parameters dictionary.</param>
        </member>
        <member name="M:Conversations.Service.Contracts.ExceptionHelperModes.ContainsMode(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Checks for the presence of a conversation mode in the specified creation parameters.
            </summary>
            <param name="creationParameters">The creation parameters dictionary.</param>
            <returns>A value indicating the creation parameters contains a conversation mode.</returns>
        </member>
        <member name="T:Conversations.Service.Contracts.SemanticContext.RichDocumentContext">
            <summary>
            A rich document context object.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
        </member>
        <member name="M:Conversations.Service.Contracts.SemanticContext.RichDocumentContext.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Conversations.Abstractions.Symbols.SymbolRange})">
            <summary>
            Initializes a new instance of the <see cref="T:Conversations.Service.Contracts.SemanticContext.RichDocumentContext" /> class.
            </summary>
            <param name="content">Content of the document</param>
            <param name="references">The relevant skeleton code.</param>
        </member>
        <member name="P:Conversations.Service.Contracts.SemanticContext.RichDocumentContext.References">
            <summary>
            Gets the relevant skeleton code of references in the document.
            </summary>
        </member>
        <member name="P:Conversations.Service.Contracts.SemanticContext.RichDocumentContext.OriginalReferences">
            <summary>
            Gets the original skeleton code before any reductions. Empty if there has been no reduction.
            </summary>
        </member>
        <member name="P:Conversations.Service.Contracts.StartConversationOptions.SessionId">
            <summary>
            Gets or sets the session id to use for the session that backs this conversation.
            Used primarily for restoring previously saved conversations where we want to use
            the same session id as the original conversation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotAgentMetadata">
            <summary>
            Metadata for a chat command instance.
            </summary>
            <param name="Name">Name of the chat command as it should be displayed.</param>
            <param name="Description">Description of the chat command as it should show up in the UI.</param>
            <param name="Id">Unique identifier of the agent.</param>
            <param name="Icon">Icon uri for the agent if one is available.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotAgentMetadata.#ctor(System.String,System.String,System.String,System.Uri)">
            <summary>
            Metadata for a chat command instance.
            </summary>
            <param name="Name">Name of the chat command as it should be displayed.</param>
            <param name="Description">Description of the chat command as it should show up in the UI.</param>
            <param name="Id">Unique identifier of the agent.</param>
            <param name="Icon">Icon uri for the agent if one is available.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentMetadata.Name">
            <summary>Name of the chat command as it should be displayed.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentMetadata.Description">
            <summary>Description of the chat command as it should show up in the UI.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentMetadata.Id">
            <summary>Unique identifier of the agent.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotAgentMetadata.Icon">
            <summary>Icon uri for the agent if one is available.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor">
            <summary>
            Describes a brokered service that implements <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />.
            Used to register the brokered service with <see cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.RegisterChunkSourceAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor.ServiceMoniker">
            <summary>
            The moniker that can be used to request a proxy of the source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor.BatchIdentityTypes">
            <summary>
            Names of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity" /> types that this provider may produce.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor.ChunkTypes">
            <summary>
            Names of chunk types that this provider may produce.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor.Experimental">
            <summary>
            Gets a flag describing whether the chunk source is experimental. Experimental chunk sources must be explicitly enabled by name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkTranslatorDescriptor">
            <summary>
            Describes a brokered service that implements <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />.
            Used to register the brokered service with <see cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.RegisterChunkTranslatorAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkTranslatorDescriptor,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkTranslatorDescriptor.ServiceMoniker">
            <summary>
            The moniker that can be used to request a proxy of the processor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkTranslatorDescriptor.BatchIdentityTypes">
            <summary>
            Names of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity" /> types that this processor can handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkTranslatorDescriptor.ChunkTypes">
            <summary>
            Names of chunk types that this processor can handle.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource">
            <summary>
            A brokered service that produces <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch" />es containing chunks,
            and sends them to the appropriate <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" /> brokered service that's specified
            by the <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions.TargetIndex" />'s <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexOptions.TranslatorMoniker" />.
            Called as a result of calling <see cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.UpdateIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource.SendChunksToTranslatorAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexMetadata,System.Threading.CancellationToken)">
            <summary>
            Collects chunks from the current state and sends them to the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />.
            </summary>
            <param name="options">Configuration reflecting the initiating request.</param>
            <param name="operationId">Indexing operation this send is associated with.</param>
            <param name="targetIndexMetadata">Metadata of the index the chunks will be sent to.</param>
            <param name="cancellationToken">Cancellation of the chunking operation.</param>
            <returns>Task that completes when all chunks are provided.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator">
            <summary>
            Brokered service responsible for storing domain-specific data in the RAG index, and retrieving it.
            Warning: Chunk translator interface is unstable and subject to change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator.StoreBatchAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch,System.Threading.CancellationToken)">
            <summary>
            Translate domain-specific batches for generic storage, and sends the generic chunks to be stored.
            If the ChunkBatch already exists, it must be overwritten.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator.TranslateSearchResultsAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexSearchResult[],System.Threading.CancellationToken)">
            <summary>
            Translate text search results into domain-specific results.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService">
            <summary>
            Brokered service providing Copilot-backed indexing capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.UpdateIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions,System.Threading.CancellationToken)">
            <summary>
            Updates an index using the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" /> specified in its <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexMetadata" />
            and all registered <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />s that have matching chunk &amp; metadata types.
            </summary>
            <param name="operationId">Logical operation id to correlate this index update task (and any child tasks in other services) with.</param>
            <param name="options">Options for the update operation.</param>
            <param name="cancellationToken">Cancellation for the update operation. If cancelled, the index may be partially updated.</param>
            <returns>Awaitable task for the update operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.GetIndexBackendAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId,System.Threading.CancellationToken)">
            <summary>
            Get a index backend's proxy.
            Usually should be called by <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />s which translate between domain-specific <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch" />es
            and raw <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" />s.
            The returned backend proxy MUST be disposed to avoid memory leaks.
            </summary>
            <param name="indexerId">ID of the index.</param>
            <param name="cancellationToken">Cancellation.</param>
            <returns>A proxy to the backend, if it exists. The proxy must be disposed when no longer needed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.GetIndexMetadataAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId,System.Threading.CancellationToken)">
            <summary>
            Get metadata about an index by ID.
            </summary>
            <param name="indexerId">ID of the index to get metadata for.</param>
            <param name="cancellationToken">Cancellation.</param>
            <returns>The index's metadata, if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.CreateIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new index.
            </summary>
            <param name="options">Requested configuration for the new index.</param>
            <param name="cancellationToken">Cancellation for the operation.</param>
            <returns>Metadata about the created index, including <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexMetadata.Id" /> which can be used to operate on it.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.RegisterChunkSourceAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor,System.Threading.CancellationToken)">
            <summary>
            Registers a chunk source for use in indexing operations.
            </summary>
            <param name="descriptor">Descriptor of the source to use.</param>
            <param name="cancellationToken">Cancellation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.RegisterChunkTranslatorAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkTranslatorDescriptor,System.Threading.CancellationToken)">
            <summary>
            Registers a chunk translator for use in indexing operations.
            </summary>
            <param name="descriptor">Descriptor of the translator to use.</param>
            <param name="cancellationToken">Cancellation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.SearchAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Searches an index for a query. Results are translated into domain-specific chunks by the index's configured <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />.
            </summary>
            <param name="operationId">Logical operation id to correlate this search task (and any child tasks in other services) with.</param>
            <param name="targetIndex">ID of the index to search.</param>
            <param name="query">Query to search within that index.</param>
            <param name="cancellationToken">Cancellation for the search operation.</param>
            <returns>Ordered search results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.UnloadIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId,System.Threading.CancellationToken)">
            <summary>
            Unloads the backend index service and releases any resources it holds.
            </summary>
            <param name="indexId">ID of the index.</param>
            <param name="cancellationToken">Cancellation for unloading index.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IHasServiceMoniker">
            <summary>
            Interface for types that contain a brokered service's <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IHasServiceMoniker.ServiceMoniker" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IHasServiceMoniker.ServiceMoniker">
            <summary>
            Service moniker.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexingDescriptors">
            <summary>
            Descriptors for indexing-related brokered services
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexingDescriptors.CopilotIndexingService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the Visual Studio copilot service.
            Use the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexingDescriptors.CreateRpcDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Construct an RPC descriptor with default options for indexing-related services.
            </summary>
            <param name="moniker">Service moniker to create the descriptor for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions">
            <summary>
            Parameters for an index update operation (<see cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService.UpdateIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions,System.Threading.CancellationToken)" />).
            Will be passed to relevant <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />s, which can change their behavior accordingly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions.TargetIndex">
            <summary>
            The ID of the index to update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions.RecreateExistingBatches">
            <summary>
            Whether batches that already exist in the index should be re-created by the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />.
            If off, the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" /> shouldn't query the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />, which
            may result in overall faster chunking in cases where we know that the chunks won't already exist (e.g. a new index).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions.RequestedBatches">
            <summary>
            Optional list of specific batch metadata to produce.
            Signals to <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />s that they should only produce matching chunk batches.
            For example, to do an incremental update of code file chunks upon saving, batch metadata
            for the modified file could be attached so that only that file's chunks would need to be provided.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions.IgnorePatterns">
            <summary>
            Optional list of patterns to be ignored by the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />.
            The specific usage of these patterns to exclude some <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity" />s is
            defined by the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" /> implementation.
            </summary>
            <remarks>The suggested use for batches that map to files is to exclude any files with full paths matching any of these strings.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.UpdateIndexOptions.EnabledExperimentalChunkSources">
            <summary>
            Optional list of 'experimental' chunk sources to enable. See <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkSourceDescriptor.Experimental" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk">
            <summary>
            Chunks derived from code files. Intended to be converted to chunk
            and contained in <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch" />es, where they will share metadata
            (<see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.FileBatchIdentity" />) about the file they're derived from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.FullName">
            <summary>
            Name of the indexed chunk
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.Description">
            <summary>
            Human-readable description of the contents of a chunk.
            For C# methods, this is likely an xml documentation comment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.SourceCode">
            <summary>
            The content of the chunk that is to be indexed and retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.LineSpan">
            <summary>
            Line-level location of the content within the containing file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CharSpan">
            <summary>
            Character-level location of the content within the containing file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CodeFileSpan`1">
            <summary>
            Span within a code file.
            </summary>
            <typeparam name="T">Type of span within the code file.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CodeFileSpan`1.Start">
            <summary>
            Beginning of the span. Should not be more than <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CodeFileSpan`1.End" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CodeFileSpan`1.End">
            <summary>
            End of the span. Should not be less than <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CodeFileSpan`1.Start" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.LineNumber">
            <summary>
            Line number in a code file.
            </summary>
            <param name="Line">Line number</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.LineNumber.#ctor(System.Int32)">
            <summary>
            Line number in a code file.
            </summary>
            <param name="Line">Line number</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.LineNumber.Line">
            <summary>Line number</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CharacterIndex">
            <summary>
            Character index in a code file.
            </summary>
            <param name="Index">Character index.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CharacterIndex.#ctor(System.Int32)">
            <summary>
            Character index in a code file.
            </summary>
            <param name="Index">Character index.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk.CharacterIndex.Index">
            <summary>Character index.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CurrentWorkspaceState">
            <summary>
            State related to the currently open workspace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CurrentWorkspaceState.CurrentIndex">
            <summary>
            If set, the index ID that is in use for this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CurrentWorkspaceState.Path">
            <summary>
            Gets path to the current workspace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CurrentWorkspaceState.ScopeVisible">
            <summary>
            Controls whether the workspace scope should be visible in this workspace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.FileBatchIdentity">
            <summary>
            Details specific to file batches, which represent files in the workspace.
            Intended to be converted to <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity" /> and stored as <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.Identity" />.
            </summary>
            <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.CodeChunk" />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.FileBatchIdentity.FilePath">
            <summary>
            On-disk filename this code batch is from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.FileBatchIdentity.ModifiedDate">
            <summary>
            Time the code was last modified, if applicable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService">
            <summary>
            A service for managing the notion of an index belonging to the current workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initialize the service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService.TryUpdateIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId,System.Threading.CancellationToken)">
            <summary>
            Requests that the current workspace be indexed. This may not have an effect if the index already exists or is up to date.
            </summary>
            <param name="operationId">Logical indexing operation to associate this request with.</param>
            <param name="cancellationToken">Cancellation for the request.</param>
            <returns>A task that completes when the indexing update is finished. Returns null if there is no current workspace.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService.GetIndexIdAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the id of the current workspace's index. Returns null if there is no current workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService.ResetIndexAsync(System.Threading.CancellationToken)">
            <summary>
            Reset the current workspace's index by replacing it with a new index. Throws if there is no current workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService.IsSolutionInOpenFolderModeAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if the solution is in open folder mode.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation. The task result contains a boolean value indicating whether the solution is in open folder mode.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService.GetWorkspacePathAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the path of the workspace.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation. The task result contains the path of the workspace.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICurrentWorkspaceIndexService">
            <summary>
            A service for managing state related to the "current workspace".
            In VS, this is the currently open solution or folder of code.
            This service is an implementation detail consumed by a service implementing <seealso cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.Code.ICopilotWorkspaceIndexService" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId">
            <summary>
            Unique identifier of an index.
            </summary>
            <param name="Guid">The index's id.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId.#ctor(System.Guid)">
            <summary>
            Unique identifier of an index.
            </summary>
            <param name="Guid">The index's id.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexId.Guid">
            <summary>The index's id.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexMetadata">
            <summary>
            'Live' metadata associated with an index that exists in <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexOptions">
            <summary>
            Options specified when creating the index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexOptions.Method">
            <summary>
            Underlying index method to use with this index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkIndexOptions.TranslatorMoniker">
            <summary>
            Moniker of a translator service that will be used to read and write domain-specific data to the index.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId">
            <summary>
            A guid which links to the origin of an indexing 'operation' and any actions related to it. Each operation initiated by a caller should have a unique id.
            </summary>
            <param name="Guid">The guid that correlates to the originating request.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId.#ctor(System.Guid)">
            <summary>
            A guid which links to the origin of an indexing 'operation' and any actions related to it. Each operation initiated by a caller should have a unique id.
            </summary>
            <param name="Guid">The guid that correlates to the originating request.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexOperationId.Guid">
            <summary>The guid that correlates to the originating request.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IEmbeddable">
            <summary>
            Objects which embeddings can be generated for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IEmbeddable.EmbeddableText">
            <summary>
            Text to be used to generate the embedding.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery">
            <summary>
            Search query to execute against an index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery.UserQuery">
            <summary>
            Natural language query entered by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery.DerivedUserQueries">
            <summary>
            Natural language queries used to retrieve <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" />s from the local index.
            These should be based on <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery.UserQuery" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery.Take">
            <summary>
            How many results to take after sorting by relevance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQueryString">
            <summary>
            A string that is used to search an index.
            </summary>
            <param name="Query">The search string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQueryString.#ctor(System.String)">
            <summary>
            A string that is used to search an index.
            </summary>
            <param name="Query">The search string.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQueryString.Query">
            <summary>The search string.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchResult">
            <summary>
            Search result which has been translated from <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexSearchResult" /> &amp; <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" />
            to a domain-specific chunk by the index's configured <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchResult.BatchIdentity">
            <summary>
            The batch this chunk belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchResult.Chunk">
            <summary>
            The result chunk which has been created by the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" />.
            May be any type that the index's configured translator supports.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexSearchResult">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" />-containing search result from textual embedding storage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexSearchResult.Value">
            <summary>
            The text chunk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexSearchResult.GeneratedQuery">
            <summary>
            Which of the generated queries this result was from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexSearchResult.Score">
            <summary>
            The score of this search result.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText">
            <summary>
            Raw unit of textual content that is stored and retrieved from the index.
            In most cases, you'll want to go through a <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" /> and work with chunk
            which encapsulates all the domain-specific details of the data you're indexing.
            </summary>
            <remarks>Currently contains metadata specific to code files, we intend to make this generic in the future.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.Content">
            <summary>
            Textual content stored in the index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.FullName">
            <summary>
            Name of the indexed chunk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.Description">
            <summary>
            Human-readable description of the contents of a chunk.
            For code, this may be an xml documentation comment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.SourceCode">
            <summary>
            The content of the chunk that is to be indexed and retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.FilePath">
            <summary>
            The on-disk path of the content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.LineStart">
            <summary>
            Location of the content within the <see ref="FilePath" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.CharStart">
            <summary>
            Location of the content within the <see ref="FilePath" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.LineEnd">
            <summary>
            Location of the content within the <see ref="FilePath" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText.CharEnd">
            <summary>
            Location of the content within the <see ref="FilePath" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ITextChunkStorage">
            <summary>
            Direct access to the index backend to work with raw <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" />s.
            In most cases, you'll want to go through a <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" /> which encapsulates
            all the domain-specific details of the data you're indexing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.TextChunkBatch">
            <summary>
            Collections of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" /> that can be indexed &amp; updated as a single unit.
            The raw text indexable analogue of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch" />.
            In most cases, you'll want to go through a <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" /> and work with <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch" />
            which encapsulates all the domain-specific details of the data you're indexing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.TextChunkBatch.Identity">
            <summary>
            The identity of the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IndexText" /> batch. Should be comparable by value.
            Can be any type serializable by MessagePack.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity">
            <summary>
            MessagePack-serializable wrapper for information identifying a batch of chunks.
            May be used by <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkTranslator" /> and matching <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.IChunkSource" />s to communicate
            about whether a batch already exists in the index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity.Value">
            <summary>
            Metadata for the chunk batch. Can be any type that is serializable via MessagePack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity.Get``1">
            <summary>
            Get a specific type of metadata out of this wrapper. Equivalent to casting <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.BatchIdentity.Value" />.
            </summary>
            <typeparam name="T">The type of metadata to retrieve.</typeparam>
            <returns>The metadata.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch">
            <summary>
            Collection of chunks to be indexed as a single unit.
            Chunks and <see cref="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.Identity" /> may be any MessagePack-serializable type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.Identity">
            <summary>
            Batch identity applicable to all chunks in the batch. For typed access, use <see cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.GetIdentity``1" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.ChunksData">
            <summary>
            Untyped array of chunk data. For typed access, use <see cref="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.GetChunks``1" />, or cast to an array.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.GetIdentity``1">
            <summary>
            Retrieve this batch's identity.
            </summary>
            <typeparam name="TIdentity">Identity type.</typeparam>
            <returns>Identity of the type specified.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.GetChunks``1">
            <summary>
            Retrieve this batch's chunks.
            </summary>
            <typeparam name="TChunk">The chunk type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.CreateFrom``2(``0[],``1)">
            <summary>
            Create a serializable batch of chunks from an enumerable of chunks and identity object.
            </summary>
            <typeparam name="TChunk">The type of chunk being stored in this batch.</typeparam>
            <typeparam name="TIdentity">The type of identity to store in this batch.</typeparam>
            <param name="inputChunks">The chunks to store.</param>
            <param name="inputIdentity">The identity to store.</param>
            <returns>The resulting wrapper containing chunks and metadata.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ChunkBatch.CreateFromAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a serializable batch of chunks from a stream of chunks and identity object.
            </summary>
            <typeparam name="TChunk">The type of chunk being stored in this batch.</typeparam>
            <typeparam name="TIdentity">The type of identity to store in this batch.</typeparam>
            <param name="inputChunkStream">The stream of chunks to store.</param>
            <param name="inputIdentity">The identity to store.</param>
            <param name="cancellationToken">Cancellation.</param>
            <returns>The resulting wrapper containing chunks and metadata.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ISemanticContextService">
            <summary>
            Brokered service providing Copilot-backed semantic indexing capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ISemanticContextService.IndexFilesAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Methods to index file to create Semantic Context.
            </summary>
            <param name="files"><see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of files to index.</param>
            <param name="cancellationToken">Cancellation token to propagate.</param>
            <returns>Task returning completion.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ISemanticContextService.GetSemanticContextAsync(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.DocumentSelection},System.Threading.CancellationToken)">
            <summary>
            Gets a list of skeleton code ranges of relevant definitions for a file.
            </summary>
            <param name="filePath">file path to get relevant definitions for.</param>
            <param name="code">contents of the file</param>
            <param name="selections">Relevant selections in the editor</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of skeleton code ranges.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ISemanticContextService.ReduceContextAsync(System.Collections.Generic.IReadOnlyList{Conversations.Abstractions.Symbols.SymbolRange},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reduces a collection of skeleton code ranges based off a given token limit.
            </summary>
            <param name="ranges">Skeleton code ranges.</param>
            <param name="tokenLimit">token limit to fit</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Reduced collection of skeleton code ranges.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ISemanticContextService.SkeletonizeAsync(Conversations.Abstractions.Symbols.SymbolRange,System.Threading.CancellationToken)">
            <summary>
            Returns the skeleton code range into a string.
            </summary>
            <param name="range">Skeleton code ranges.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Reduced collection of skeleton code ranges.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SemanticContextServiceDescriptor.IndexFilePath">
            <summary>
            File path to store index.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SemanticContextServiceDescriptor.CreateActivationArguments(System.String)">
            <summary>
            Helper method to create activation arguments for the Semantic Context service.
            </summary>
            <param name="indexFilePath">File path to storing index.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SemanticContextServiceDescriptor.SemanticContextService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the Visual Studio copilot service.
            Use the <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ISemanticContextService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SemanticContextServiceDescriptor.CreateRpcDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Construct an RPC descriptor with default options for indexing-related services.
            </summary>
            <param name="moniker">Service moniker to create the descriptor for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.TypelessMessagePackDescriptor.TypelessDescriptorMessagePackOptions">
             <summary>
             This options class is used to override LoadType to ensure type loads occur on the AssemblyLoadContext
             that loaded Copilot assemblies.
            
             In case of ServiceHub and extensibility scenarios, this will be extensions load context which will be able to resolve
             assemblies deployed by the extension.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Formatters.DictionaryStringObjectFormatter">
            <summary>
            A formatter that is hard-coded to use the <see cref="T:MessagePack.Formatters.TypelessFormatter" /> for values in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1">
            <summary>
            A collection of embedding vectors, stored compactly as a contiguous block of data.
            </summary>
            <typeparam name="T">Which floating-point data type to use for representing the vectors.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1.Dimensionality">
            <summary>
            Dimensionality of the embeddings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1.Data">
            <summary>
            Contiguous block of embedding data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1.Count">
            <summary>
            Number of embeddings in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1.Zip``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Zips the contained embeddings with an enumerable of objects which the embeddings were generated from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1.CopyFrom(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,`0[]}},System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingCollection`1" /> by copying data from vectors &amp; their indices.
            </summary>
            <param name="input">Vectors and indices to copy into the collection.</param>
            <param name="count">Optional. Number of vectors to store in the collection. If not provided, input will be enumerated once to get the count.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.EmbeddingVector`1.ToArray">
            <summary>
            Copy the contents of the embedding vector to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService">
            <summary>
            Interface for interacting with conversations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.GetAuthInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Checks Github and Copilot tokens and returns auth status
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.StartConversationAsync(Conversations.Service.Contracts.StartConversationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new conversation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.AskInConversationAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.ActiveInteractions,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotInteraction},System.Threading.CancellationToken)">
            <summary>
            Performs a request within the context of a conversation using specified history
            </summary>
            <param name="sessionId">The id of the conversation to ask in.</param>
            <param name="request">The request.</param>
            <param name="activeResponse">The active interaction to stream updates back to.</param>
            <param name="history">The interaction history to use.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The response to the request</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.EndConversationAsync(Conversations.Service.Contracts.EndConversationOptions,System.Threading.CancellationToken)">
            <summary>
            Ends the conversation
            </summary>
            <param name="options">The end conversation options</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.RegisterContextProviderAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Registers a context provider with the out of proc service.
            </summary>
            <param name="serviceMoniker">The service moniker for the context provider.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.RegisterTypesAsync(Microsoft.VisualStudio.Copilot.ICopilotTypeProvider,System.String[],System.Threading.CancellationToken)">
            <summary>
            Register copilot types for context and planning.
            </summary>
            <param name="typeProvider">The type provider that will handle the types.</param>
            <param name="types">The types handled by <paramref name="typeProvider" />.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.UserInputCompletionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Prompts completion within the context of a conversation
            </summary>
            <param name="userInput">The user input</param>
            <param name="cancel">The cancellation token</param>
            <returns>The responses received from the user as an <see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.ConfirmServiceRunningAsync(System.Threading.CancellationToken)">
            <summary>
            Confirms that the out-of-process service process is running.
            This should throw if there is a problem reaching the service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.GetRemoteAgentMetadataAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of remote agents discovered from the current Copilot Chat API.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.AskRemoteAgentAsync(System.String,Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.ActiveInteractions,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotInteraction},System.Threading.CancellationToken)">
            <summary>
            Performs a request to a specific remote agent using the provided history.
            </summary>
            <param name="remoteAgentIdentifier">Remote agent identifier as retrieved by <see cref="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IConversationsService.GetRemoteAgentMetadataAsync(System.Threading.CancellationToken)" /> method.</param>
            <param name="sessionId">The id of the conversation to ask in.</param>
            <param name="request">The request.</param>
            <param name="activeInteractions">The active interaction to stream updates back to.</param>
            <param name="history">The interaction history to use.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>The response to the request</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Service.Contracts.IEmbeddingService">
            <summary>
            Service for requesting embeddings from the backend.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Service.Contracts.IEmbeddingService.RequestEmbeddingsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Generate embeddings for a set of strings.
            </summary>
            <param name="inputs">Request to generate embeddings for.</param>
            <param name="cancellationToken">Cancellation for the request.</param>
            <returns>Generated embeddings.</returns>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>fweM5DK4cbIEg7e5CW0Aaut/59sNDQdXf0TnjptyeVE=</DigestValue></Reference></SignedInfo><SignatureValue>g7UiLhWYrSMe/8cdvwWNNYjry+kQRp6eiBTDhdX2dhYIBn78sjOAysopIKGtuQ8gQoKCgRKMhdqg9SD4vxRKOZkZ0peZjeomY4yJBvX+yz0Jm0jaS8yZ5C2n0U3KG+8b9vN1XcPhPxUkz8cmIZd5exLmvJCf4DUzqjs4n4PVKnkfj/TlyvRdioFfC23zakyOSNA6W+BBHWsAgQCemBIT8E6zHIQNlmx3gHsijbaCo2XjUUCapsNOl5F58Kt0DyvrGENFQCDKjdhPI/dg3u6yyU0NOvtPrCXIZp9pE7utAWciJGDfTp9p/vXUFQc8s9tKnlakJgUahjhcNM8HVJURxQ==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY+YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkwHpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y+Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIGAzCCA+ugAwIBAgITMwAAA64tNVHIU49VHQAAAAADrjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDg1OVoXDTI0MTExNDE5MDg1OVowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY+YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkwHpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y+Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQIDAQABo4IBgjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFIcf73Spl4cHOFoll27H9COd4fE/MFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIzMDAxMis1MDE4MzYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQBqyWA1Eu7PKNMjaaxl0V7gJ0XBysUoxZluMHJXFE2LEGZIZ2zMLYVjOnAGG/4dluRjSrZZo/8vwk4Xt8v6NBB9ofo8H1P/XidHytWTv9lg9MYu++6lPmu5fCozD3cI2NLZPW2BBhGX2D0R8tQBj0FbmZRuIucpiQ7DK3CHKlfKcc7MP8pPzuMv55Tox8+KFQD1NG6+bfbYA/BNPBkg4tyOh+exbaHfcNuodDJUIjq9dF6oa+Yjy0u0pUMI/B1t+8m6rJo0KSoZlrpesYl0jRhpt+hmqx8uENXoGJcYZVJ5N2Skq90LViKNRhi9N4U+e8c4y9uXyomUF/6viCPJ7huTNEJo75ehIJba+IWd3txUEc0R3y6DT6txC6cW1nR/LTbo9I/8fQq538G5IvJ+e5iSiOSVVkVk0i5m03Awy5E2ZSS4PVdQSCcFxmN4tpEfYuR7AAy/GJVtIDFlUpSgdXokpSui5hYtK1R9enXXvo+U/xGkLRc+qp4De3dZbzu7pOq7V/jCyhuCw0bEIAU4urCGIip7TI6GBRzD7yPzjFIqeZY7S4rVW5BRn2oEqpm8Su6yTIQvMIk8x2pwYNUa2339Z4gW5xW21eFA5mLpo7NRSKRQms5OgAA18aCgqOU7Ds0h6q/YB4BmEAtoTMl/TBiyKaMGAlEcdy+5FIhmzojMGg==</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
