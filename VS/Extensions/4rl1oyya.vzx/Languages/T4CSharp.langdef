<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'T4' language created by SubMain.
  Copyright (c) 2001-2020 vbCity.com LLC.  All rights reserved.

-->
<LanguageDefinition LanguageKey="T4" LanguageDescription="T4" Creator="SubMain" Copyright="Copyright (c) 2001-2020 vbCity.com LLC.  All rights reserved." xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="ASPDelimiter" Description="ASP Delimiter" DefaultStyle="#FF000000,False,False,#FFFFFF00" />
		<ClassificationType Key="ASPDelimiterRed" Description="ASP Delimiter Red" DefaultStyle="#FF000000,False,False,#FFFF0000" />
		<ClassificationType Key="ASPDelimiterOrange" Description="ASP Delimiter Orange" DefaultStyle="#FF000000,False,False,#FFFF9900" />
		<ClassificationType Key="CollapsibleText" Description="Collapsible Text" DefaultStyle="#FF808080,False,False" />
		<ClassificationType Key="CommentDefault" Description="Comment Default" DefaultStyle="#FF008000,False,False" />
		<ClassificationType Key="CommentDelimiter" Description="Comment Delimiter" DefaultStyle="#FF008000,False,False" />
		<ClassificationType Key="Default" Description="Default style" DefaultStyle="#FF000000,False,False" />
		<ClassificationType Key="XmlAttribute" Description="XML Attribute" DefaultStyle="#FFFF0000" />
		<ClassificationType Key="XmlAttributeValue" Description="XML Attribute Value" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="XmlComment" Description="XML Comment" DefaultStyle="#FF008000" />
		<ClassificationType Key="XMLCommentDefault" Description="XML Comment Default" DefaultStyle="#FF008000,False,False" />
		<ClassificationType Key="XMLCommentTag" Description="XML Comment Tag" DefaultStyle="#FF808080,False,False" />
		<ClassificationType Key="XmlDeclaration" Description="XML Declaration" DefaultStyle="#FFFF00FF" />
		<ClassificationType Key="XmlDelimiter" Description="XML Delimiter" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="XmlEntity" Description="XML Entity" DefaultStyle="#FFFF0000" />
		<ClassificationType Key="XmlName" Description="XML Name" DefaultStyle="#FF800000" />
		<ClassificationType Key="XmlProcessingInstruction" Description="XML Processing Instruction" DefaultStyle="#FFFF00FF" />
		<ClassificationType Key="TagAttribute" Description="Tag attribute" DefaultStyle="#FFFF0000" />
		<ClassificationType Key="TagName" Description="Tag name" DefaultStyle="#FF800000" />
		<ClassificationType Key="TagAttributeValue" Description="Tag attribute value" DefaultStyle="#FF0000FF" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<DynamicLexer.Macros>
				<Macro Key="NameStartChar" Pattern="[A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-���-��]" />
				<Macro Key="NameChar" Pattern="[A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-���-��\-\.0-9:·̀-ͯ‿-⁀]" />
				<Macro Key="Name" Pattern="{NameStartChar}({NameChar})*" />
				<Macro Key="TagName" Pattern="[a-zA-Z_0-9\-:]" />
				<Macro Key="Word" Pattern="[A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-���-��\-\.0-9·̀-ͯ‿-⁀]" />
				<Macro Key="NonWord" Pattern="[^A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-���-��\-\.0-9·̀-ͯ‿-⁀]" />
				<Macro Key="URLMacro" Pattern="https?:// [\w\-]+ (\. [\w\-]+)* (/ [\w\-./?%=]*)?" />
			</DynamicLexer.Macros>
			<!-- Default state -->
			<State Id="1" Key="Default" DefaultTokenId="12000" DefaultTokenKey="Default">
				<State.ChildStates>
					<StateRef Key="XMLComment" />
					<StateRef Key="EndTag" />
					<StateRef Key="Comment" />
					<StateRef Key="CSharpComment" />
					<StateRef Key="CSharpMultiLineComment" />
					<StateRef Key="VBComment" />
					<StateRef Key="Declaration" />
					<StateRef Key="ProcessingInstruction" />
					<StateRef Key="T4TemplateDirective" />
					<StateRef Key="T4Code" />
					<StateRef Key="T4Statements" />
					<StateRef Key="T4Expressions" />
					<StateRef Key="StartTag" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="12001" TokenKey="Entity" ClassificationTypeKey="XmlEntity" Pattern="&amp; \#? {Word}+ ;?" />
				<RegexPatternGroup TokenId="12002" TokenKey="Identifier" Pattern="{Alpha}({Word})*" />
				<RegexPatternGroup TokenId="12003" TokenKey="Whitespace" Pattern="{LineTerminatorWhitespace}+" />
				<ExplicitPatternGroup TokenId="12004" TokenKey="InvalidEndTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;/" />
				<ExplicitPatternGroup TokenId="12005" TokenKey="InvalidStartTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;" />
			</State>
			<!-- StartTag state -->
			<State Id="2" Key="StartTag" DefaultTokenId="12006" DefaultTokenKey="StartTagText">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="12007" TokenKey="StartTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;" LookAheadPattern="{NameStartChar}" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="12008" TokenKey="StartTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="/? &gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttributeDoubleQuoteValue" />
					<StateRef Key="StartTagAttributeSingleQuoteValue" />
				</State.ChildStates>
				<RegexPatternGroup Pattern="{LineTerminatorWhitespace}+" />
				<RegexPatternGroup TokenId="12009" TokenKey="StartTagName" ClassificationTypeKey="XmlName" LookBehindPattern="\&lt;" Pattern="{Name}+" />
				<RegexPatternGroup TokenId="12010" TokenKey="StartTagAttributeName" ClassificationTypeKey="XmlAttribute" Pattern="{Name}+" />
				<RegexPatternGroup TokenId="12011" TokenKey="StartTagNextTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt; /?" />
			</State>
			<!-- StartTagAttributeDoubleQuoteValue state -->
			<State Id="3" Key="StartTagAttributeDoubleQuoteValue" DefaultTokenId="12012" DefaultTokenKey="StartTagAttributeValueText" DefaultClassificationTypeKey="XmlAttributeValue">
				<State.Scopes>
					<Scope IsAncestorEndScopeCheckEnabled="False">
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenId="12013" TokenKey="StartTagAttributeValueStartDelimiter" Pattern="= {LineTerminatorWhitespace}* \&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="12014" TokenKey="StartTagAttributeValueEndDelimiter" Pattern="\&quot;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\&quot;]+" />
			</State>
			<!-- StartTagAttributeSingleQuoteValue state -->
			<State Id="4" Key="StartTagAttributeSingleQuoteValue" DefaultTokenId="12012" DefaultTokenKey="StartTagAttributeValueText" DefaultClassificationTypeKey="XmlAttributeValue">
				<State.Scopes>
					<Scope IsAncestorEndScopeCheckEnabled="False">
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenId="12013" TokenKey="StartTagAttributeValueStartDelimiter" Pattern="= {LineTerminatorWhitespace}* \'" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="12014" TokenKey="StartTagAttributeValueEndDelimiter" Pattern="\'" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\']+" />
			</State>
			<!-- StartTagAttribute state -->
			<State Key="StartTagAttribute" DefaultTokenKey="StartTagDefault" DefaultClassificationTypeKey="TagAttribute">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenKey="StartTagName" ClassificationTypeKey="TagName" Pattern="{LineTerminatorWhitespace}* {TagName}+ {LineTerminatorWhitespace}*" />
						</Scope.StartPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttributeStringValue" />
					<StateRef Key="StartTagAttributeValue" />
				</State.ChildStates>
				<RegexPatternGroup TokenKey="StartTagAttribute" ClassificationTypeKey="TagAttribute" Pattern="{Word}+" LookAheadPattern="{NonWord}" />
			</State>
			<!-- StartTagAttributeValue state -->
			<State Key="StartTagAttributeValue" DefaultTokenKey="StartTagAttributeValueDefault" DefaultClassificationTypeKey="TagAttributeValue">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenKey="StartTagAttributeValueStart" ClassificationTypeKey="TagAttributeValue" Pattern="= {LineTerminatorWhitespace}*" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenKey="StartTagAttributeValueEnd" ClassificationTypeKey="TagAttributeValue" Pattern="{LineTerminatorWhitespace}+" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenKey="StartTagAttributeValueDefault" Pattern="{Word}+" />
			</State>
			<!-- StartTagAttributeStringValue state -->
			<State Key="StartTagAttributeStringValue" DefaultTokenKey="StartTagAttributeStringValueDefault" DefaultClassificationTypeKey="TagAttributeValue">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenKey="StartTagAttributeStringValueStart" ClassificationTypeKey="TagAttributeValue" Pattern="= {LineTerminatorWhitespace}* \&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenKey="StartTagAttributeStringValueEnd" ClassificationTypeKey="TagAttributeValue" Pattern="\&quot;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenKey="StartTagAttributeStringValueDefault" Pattern="[^&quot;]+" />
			</State>
			<!-- EndTag state -->
			<State Id="5" Key="EndTag" DefaultTokenId="12015" DefaultTokenKey="EndTagText" DefaultClassificationTypeKey="XmlName">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="12016" TokenKey="EndTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;/" LookAheadPattern="{NameStartChar}" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="12017" TokenKey="EndTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="[\s\n&gt;]" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\s\n&gt;]+" />
			</State>
			<!-- Comment state -->
			<State Id="6" Key="Comment" DefaultTokenId="12018" DefaultTokenKey="CommentText" DefaultClassificationTypeKey="XmlComment">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="12019" TokenKey="CommentStartDelimiter" Pattern="&lt;!--" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="12020" TokenKey="CommentEndDelimiter" Pattern="--&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\-]+" />
			</State>
			<!-- ProcessingInstruction state -->
			<State Id="7" Key="ProcessingInstruction" DefaultTokenId="12021" DefaultTokenKey="ProcessingInstructionText" DefaultClassificationTypeKey="XmlProcessingInstruction">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="12022" TokenKey="ProcessingInstructionStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;?" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="12023" TokenKey="ProcessingInstructionEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="?&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\?]+" />
			</State>
			<!-- Declaration state -->
			<State Id="8" Key="Declaration" DefaultTokenId="12024" DefaultTokenKey="DeclarationText" DefaultClassificationTypeKey="XmlDeclaration">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="12025" TokenKey="DeclarationStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;!" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="12026" TokenKey="DeclarationEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^&gt;]+" />
			</State>
			<!-- T4TemplateDirective state -->
			<State Id="9" Key="T4TemplateDirective">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup Key="T4TemplateDirectiveStartToken" ClassificationTypeKey="ASPDelimiter" Pattern="&lt;#@" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup Key="T4TemplateDirectiveEndToken" ClassificationTypeKey="ASPDelimiter" Pattern="#&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttribute" />
				</State.ChildStates>
			</State>
			<!-- T4Code state -->
			<State Id="10" Key="T4Code">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="T4CodeStartToken" ClassificationTypeKey="ASPDelimiter" Pattern="&lt;#+" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenKey="T4CodeEndToken" ClassificationTypeKey="ASPDelimiter" Pattern="#&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
			</State>
			<!-- T4Expressions state -->
			<State Id="11" Key="T4Expressions">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="T4ExpressionsStartToken" ClassificationTypeKey="ASPDelimiter" Pattern="&lt;#=" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenKey="T4ExpressionsEndToken" ClassificationTypeKey="ASPDelimiter" Pattern="#&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
			</State>
			<!-- T4Statements state -->
			<State Id="12" Key="T4Statements">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="T4StatementsStartToken" ClassificationTypeKey="ASPDelimiter" Pattern="&lt;#" LookAheadPattern="[^@|^+|^=]" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenKey="T4StatementsEndToken" ClassificationTypeKey="ASPDelimiter" Pattern="#&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
			</State>
			<!-- CSharpMultiLineComment state -->
			<State Id="13" Key="CSharpMultiLineComment" DefaultTokenKey="CSharpMultiLineCommentDefaultToken" DefaultClassificationTypeKey="CommentDefault">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="CSharpMultiLineCommentStartToken" ClassificationTypeKey="CommentDelimiter" Pattern="/*" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenKey="CSharpMultiLineCommentEndToken" ClassificationTypeKey="CommentDelimiter" Pattern="*/" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="T4Expressions" />
					<StateRef Key="T4Statements" />
					<StateRef Key="T4Code" />
				</State.ChildStates>
			</State>
			<!-- VBComment state -->
			<State Id="14" Key="VBComment" DefaultTokenKey="VBCommentDefaultToken" DefaultClassificationTypeKey="CommentDefault">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="VBCommentStartToken" ClassificationTypeKey="CommentDelimiter" Pattern="'" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenKey="VBCommentEndToken" ClassificationTypeKey="CommentDelimiter" Pattern="{LineTerminator}" IsWhitespace="True" />
 						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="T4Expressions" />
					<StateRef Key="T4Statements" />
					<StateRef Key="T4Code" />
				</State.ChildStates>
			</State>
			<!-- XMLComment state -->
			<State Id="15" Key="XMLComment">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="XMLCommentStartToken" ClassificationTypeKey="XMLCommentTag" Pattern="///" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenKey="XMLCommentEndToken" ClassificationTypeKey="XMLCommentTag" Pattern="{LineTerminator}" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="T4Expressions" />
					<StateRef Key="T4Statements" />
					<StateRef Key="T4Code" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="59" TokenKey="XmlCommentStartTag" ClassificationTypeKey="XmlDocumentationTag" Pattern="&lt; [^\n&gt;]* &gt;?" />
				<RegexPatternGroup TokenId="60" TokenKey="XmlCommentEndTag" ClassificationTypeKey="XmlDocumentationTag" Pattern="&lt;/ [^\n&gt;]* &gt;?" />
				<RegexPatternGroup TokenId="56" TokenKey="XmlCommentText" Pattern="[^\n&lt;]+" />
			</State>
			<!-- CSharpComment state -->
			<State Id="16" Key="CSharpComment" DefaultTokenKey="CSharpCommentDefaultToken" DefaultClassificationTypeKey="CommentDefault">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenKey="CSharpCommentStartToken" ClassificationTypeKey="CommentDelimiter" Pattern="//" LookAheadPattern="[^\/]" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenKey="CSharpCommentEndToken" ClassificationTypeKey="CommentDelimiter" Pattern="{LineTerminator}" IsWhitespace="True" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="T4Expressions" />
					<StateRef Key="T4Statements" />
					<StateRef Key="T4Code" />
				</State.ChildStates>
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
	<!-- Example text -->
	<LanguageDefinition.ExampleText><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<!-- This is a comment -->
<parser version="1.0">
	<somevalue>
		<![CDATA[Character data]]]]><![CDATA[>
	</somevalue>
	Entities: &amp; &gt;
	<singlevals>
		<singleval value="true" anothervalue="2" />
		<singleval value='false' anothervalue='3' />
	</singlevals>
</parser>
]]></LanguageDefinition.ExampleText>
</LanguageDefinition>